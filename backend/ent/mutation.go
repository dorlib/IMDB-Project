// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"imdbv2/ent/achievement"
	"imdbv2/ent/actor"
	"imdbv2/ent/comment"
	"imdbv2/ent/dashboard"
	"imdbv2/ent/director"
	"imdbv2/ent/favorite"
	"imdbv2/ent/like"
	"imdbv2/ent/movie"
	"imdbv2/ent/predicate"
	"imdbv2/ent/review"
	"imdbv2/ent/user"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAchievement = "Achievement"
	TypeActor       = "Actor"
	TypeComment     = "Comment"
	TypeDashboard   = "Dashboard"
	TypeDirector    = "Director"
	TypeFavorite    = "Favorite"
	TypeLike        = "Like"
	TypeMovie       = "Movie"
	TypeReview      = "Review"
	TypeUser        = "User"
)

// AchievementMutation represents an operation that mutates the Achievement nodes in the graph.
type AchievementMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	image         *string
	description   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Achievement, error)
	predicates    []predicate.Achievement
}

var _ ent.Mutation = (*AchievementMutation)(nil)

// achievementOption allows management of the mutation configuration using functional options.
type achievementOption func(*AchievementMutation)

// newAchievementMutation creates new mutation for the Achievement entity.
func newAchievementMutation(c config, op Op, opts ...achievementOption) *AchievementMutation {
	m := &AchievementMutation{
		config:        c,
		op:            op,
		typ:           TypeAchievement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAchievementID sets the ID field of the mutation.
func withAchievementID(id int) achievementOption {
	return func(m *AchievementMutation) {
		var (
			err   error
			once  sync.Once
			value *Achievement
		)
		m.oldValue = func(ctx context.Context) (*Achievement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Achievement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAchievement sets the old Achievement of the mutation.
func withAchievement(node *Achievement) achievementOption {
	return func(m *AchievementMutation) {
		m.oldValue = func(context.Context) (*Achievement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AchievementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AchievementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AchievementMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AchievementMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Achievement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *AchievementMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *AchievementMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Achievement entity.
// If the Achievement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AchievementMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *AchievementMutation) ResetName() {
	m.name = nil
}

// SetImage sets the "image" field.
func (m *AchievementMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *AchievementMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Achievement entity.
// If the Achievement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AchievementMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *AchievementMutation) ResetImage() {
	m.image = nil
}

// SetDescription sets the "description" field.
func (m *AchievementMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *AchievementMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Achievement entity.
// If the Achievement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AchievementMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *AchievementMutation) ResetDescription() {
	m.description = nil
}

// Where appends a list predicates to the AchievementMutation builder.
func (m *AchievementMutation) Where(ps ...predicate.Achievement) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AchievementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Achievement).
func (m *AchievementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AchievementMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, achievement.FieldName)
	}
	if m.image != nil {
		fields = append(fields, achievement.FieldImage)
	}
	if m.description != nil {
		fields = append(fields, achievement.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AchievementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case achievement.FieldName:
		return m.Name()
	case achievement.FieldImage:
		return m.Image()
	case achievement.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AchievementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case achievement.FieldName:
		return m.OldName(ctx)
	case achievement.FieldImage:
		return m.OldImage(ctx)
	case achievement.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Achievement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AchievementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case achievement.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case achievement.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case achievement.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Achievement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AchievementMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AchievementMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AchievementMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Achievement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AchievementMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AchievementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AchievementMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Achievement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AchievementMutation) ResetField(name string) error {
	switch name {
	case achievement.FieldName:
		m.ResetName()
		return nil
	case achievement.FieldImage:
		m.ResetImage()
		return nil
	case achievement.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Achievement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AchievementMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AchievementMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AchievementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AchievementMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AchievementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AchievementMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AchievementMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Achievement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AchievementMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Achievement edge %s", name)
}

// ActorMutation represents an operation that mutates the Actor nodes in the graph.
type ActorMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	character_name *string
	image          *string
	movie_id       *int
	addmovie_id    *int
	clearedFields  map[string]struct{}
	actors         map[int]struct{}
	removedactors  map[int]struct{}
	clearedactors  bool
	done           bool
	oldValue       func(context.Context) (*Actor, error)
	predicates     []predicate.Actor
}

var _ ent.Mutation = (*ActorMutation)(nil)

// actorOption allows management of the mutation configuration using functional options.
type actorOption func(*ActorMutation)

// newActorMutation creates new mutation for the Actor entity.
func newActorMutation(c config, op Op, opts ...actorOption) *ActorMutation {
	m := &ActorMutation{
		config:        c,
		op:            op,
		typ:           TypeActor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActorID sets the ID field of the mutation.
func withActorID(id int) actorOption {
	return func(m *ActorMutation) {
		var (
			err   error
			once  sync.Once
			value *Actor
		)
		m.oldValue = func(ctx context.Context) (*Actor, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Actor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActor sets the old Actor of the mutation.
func withActor(node *Actor) actorOption {
	return func(m *ActorMutation) {
		m.oldValue = func(context.Context) (*Actor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Actor.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ActorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ActorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Actor entity.
// If the Actor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ActorMutation) ResetName() {
	m.name = nil
}

// SetCharacterName sets the "character_name" field.
func (m *ActorMutation) SetCharacterName(s string) {
	m.character_name = &s
}

// CharacterName returns the value of the "character_name" field in the mutation.
func (m *ActorMutation) CharacterName() (r string, exists bool) {
	v := m.character_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCharacterName returns the old "character_name" field's value of the Actor entity.
// If the Actor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActorMutation) OldCharacterName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCharacterName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCharacterName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCharacterName: %w", err)
	}
	return oldValue.CharacterName, nil
}

// ResetCharacterName resets all changes to the "character_name" field.
func (m *ActorMutation) ResetCharacterName() {
	m.character_name = nil
}

// SetImage sets the "image" field.
func (m *ActorMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ActorMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Actor entity.
// If the Actor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActorMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *ActorMutation) ResetImage() {
	m.image = nil
}

// SetMovieID sets the "movie_id" field.
func (m *ActorMutation) SetMovieID(i int) {
	m.movie_id = &i
	m.addmovie_id = nil
}

// MovieID returns the value of the "movie_id" field in the mutation.
func (m *ActorMutation) MovieID() (r int, exists bool) {
	v := m.movie_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMovieID returns the old "movie_id" field's value of the Actor entity.
// If the Actor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActorMutation) OldMovieID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMovieID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMovieID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMovieID: %w", err)
	}
	return oldValue.MovieID, nil
}

// AddMovieID adds i to the "movie_id" field.
func (m *ActorMutation) AddMovieID(i int) {
	if m.addmovie_id != nil {
		*m.addmovie_id += i
	} else {
		m.addmovie_id = &i
	}
}

// AddedMovieID returns the value that was added to the "movie_id" field in this mutation.
func (m *ActorMutation) AddedMovieID() (r int, exists bool) {
	v := m.addmovie_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMovieID resets all changes to the "movie_id" field.
func (m *ActorMutation) ResetMovieID() {
	m.movie_id = nil
	m.addmovie_id = nil
}

// AddActorIDs adds the "actors" edge to the Movie entity by ids.
func (m *ActorMutation) AddActorIDs(ids ...int) {
	if m.actors == nil {
		m.actors = make(map[int]struct{})
	}
	for i := range ids {
		m.actors[ids[i]] = struct{}{}
	}
}

// ClearActors clears the "actors" edge to the Movie entity.
func (m *ActorMutation) ClearActors() {
	m.clearedactors = true
}

// ActorsCleared reports if the "actors" edge to the Movie entity was cleared.
func (m *ActorMutation) ActorsCleared() bool {
	return m.clearedactors
}

// RemoveActorIDs removes the "actors" edge to the Movie entity by IDs.
func (m *ActorMutation) RemoveActorIDs(ids ...int) {
	if m.removedactors == nil {
		m.removedactors = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.actors, ids[i])
		m.removedactors[ids[i]] = struct{}{}
	}
}

// RemovedActors returns the removed IDs of the "actors" edge to the Movie entity.
func (m *ActorMutation) RemovedActorsIDs() (ids []int) {
	for id := range m.removedactors {
		ids = append(ids, id)
	}
	return
}

// ActorsIDs returns the "actors" edge IDs in the mutation.
func (m *ActorMutation) ActorsIDs() (ids []int) {
	for id := range m.actors {
		ids = append(ids, id)
	}
	return
}

// ResetActors resets all changes to the "actors" edge.
func (m *ActorMutation) ResetActors() {
	m.actors = nil
	m.clearedactors = false
	m.removedactors = nil
}

// Where appends a list predicates to the ActorMutation builder.
func (m *ActorMutation) Where(ps ...predicate.Actor) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ActorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Actor).
func (m *ActorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActorMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, actor.FieldName)
	}
	if m.character_name != nil {
		fields = append(fields, actor.FieldCharacterName)
	}
	if m.image != nil {
		fields = append(fields, actor.FieldImage)
	}
	if m.movie_id != nil {
		fields = append(fields, actor.FieldMovieID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case actor.FieldName:
		return m.Name()
	case actor.FieldCharacterName:
		return m.CharacterName()
	case actor.FieldImage:
		return m.Image()
	case actor.FieldMovieID:
		return m.MovieID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case actor.FieldName:
		return m.OldName(ctx)
	case actor.FieldCharacterName:
		return m.OldCharacterName(ctx)
	case actor.FieldImage:
		return m.OldImage(ctx)
	case actor.FieldMovieID:
		return m.OldMovieID(ctx)
	}
	return nil, fmt.Errorf("unknown Actor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case actor.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case actor.FieldCharacterName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCharacterName(v)
		return nil
	case actor.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case actor.FieldMovieID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMovieID(v)
		return nil
	}
	return fmt.Errorf("unknown Actor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActorMutation) AddedFields() []string {
	var fields []string
	if m.addmovie_id != nil {
		fields = append(fields, actor.FieldMovieID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActorMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case actor.FieldMovieID:
		return m.AddedMovieID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActorMutation) AddField(name string, value ent.Value) error {
	switch name {
	case actor.FieldMovieID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMovieID(v)
		return nil
	}
	return fmt.Errorf("unknown Actor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Actor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActorMutation) ResetField(name string) error {
	switch name {
	case actor.FieldName:
		m.ResetName()
		return nil
	case actor.FieldCharacterName:
		m.ResetCharacterName()
		return nil
	case actor.FieldImage:
		m.ResetImage()
		return nil
	case actor.FieldMovieID:
		m.ResetMovieID()
		return nil
	}
	return fmt.Errorf("unknown Actor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.actors != nil {
		edges = append(edges, actor.EdgeActors)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case actor.EdgeActors:
		ids := make([]ent.Value, 0, len(m.actors))
		for id := range m.actors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedactors != nil {
		edges = append(edges, actor.EdgeActors)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case actor.EdgeActors:
		ids := make([]ent.Value, 0, len(m.removedactors))
		for id := range m.removedactors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedactors {
		edges = append(edges, actor.EdgeActors)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActorMutation) EdgeCleared(name string) bool {
	switch name {
	case actor.EdgeActors:
		return m.clearedactors
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Actor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActorMutation) ResetEdge(name string) error {
	switch name {
	case actor.EdgeActors:
		m.ResetActors()
		return nil
	}
	return fmt.Errorf("unknown Actor edge %s", name)
}

// CommentMutation represents an operation that mutates the Comment nodes in the graph.
type CommentMutation struct {
	config
	op            Op
	typ           string
	id            *int
	text          *string
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	review        *int
	clearedreview bool
	done          bool
	oldValue      func(context.Context) (*Comment, error)
	predicates    []predicate.Comment
}

var _ ent.Mutation = (*CommentMutation)(nil)

// commentOption allows management of the mutation configuration using functional options.
type commentOption func(*CommentMutation)

// newCommentMutation creates new mutation for the Comment entity.
func newCommentMutation(c config, op Op, opts ...commentOption) *CommentMutation {
	m := &CommentMutation{
		config:        c,
		op:            op,
		typ:           TypeComment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommentID sets the ID field of the mutation.
func withCommentID(id int) commentOption {
	return func(m *CommentMutation) {
		var (
			err   error
			once  sync.Once
			value *Comment
		)
		m.oldValue = func(ctx context.Context) (*Comment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Comment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComment sets the old Comment of the mutation.
func withComment(node *Comment) commentOption {
	return func(m *CommentMutation) {
		m.oldValue = func(context.Context) (*Comment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CommentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CommentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Comment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetText sets the "text" field.
func (m *CommentMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *CommentMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *CommentMutation) ResetText() {
	m.text = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *CommentMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *CommentMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *CommentMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *CommentMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *CommentMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *CommentMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetReviewID sets the "review" edge to the Review entity by id.
func (m *CommentMutation) SetReviewID(id int) {
	m.review = &id
}

// ClearReview clears the "review" edge to the Review entity.
func (m *CommentMutation) ClearReview() {
	m.clearedreview = true
}

// ReviewCleared reports if the "review" edge to the Review entity was cleared.
func (m *CommentMutation) ReviewCleared() bool {
	return m.clearedreview
}

// ReviewID returns the "review" edge ID in the mutation.
func (m *CommentMutation) ReviewID() (id int, exists bool) {
	if m.review != nil {
		return *m.review, true
	}
	return
}

// ReviewIDs returns the "review" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReviewID instead. It exists only for internal usage by the builders.
func (m *CommentMutation) ReviewIDs() (ids []int) {
	if id := m.review; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReview resets all changes to the "review" edge.
func (m *CommentMutation) ResetReview() {
	m.review = nil
	m.clearedreview = false
}

// Where appends a list predicates to the CommentMutation builder.
func (m *CommentMutation) Where(ps ...predicate.Comment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CommentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Comment).
func (m *CommentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.text != nil {
		fields = append(fields, comment.FieldText)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case comment.FieldText:
		return m.Text()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case comment.FieldText:
		return m.OldText(ctx)
	}
	return nil, fmt.Errorf("unknown Comment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case comment.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Comment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Comment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommentMutation) ResetField(name string) error {
	switch name {
	case comment.FieldText:
		m.ResetText()
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, comment.EdgeUser)
	}
	if m.review != nil {
		edges = append(edges, comment.EdgeReview)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case comment.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case comment.EdgeReview:
		if id := m.review; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, comment.EdgeUser)
	}
	if m.clearedreview {
		edges = append(edges, comment.EdgeReview)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommentMutation) EdgeCleared(name string) bool {
	switch name {
	case comment.EdgeUser:
		return m.cleareduser
	case comment.EdgeReview:
		return m.clearedreview
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommentMutation) ClearEdge(name string) error {
	switch name {
	case comment.EdgeUser:
		m.ClearUser()
		return nil
	case comment.EdgeReview:
		m.ClearReview()
		return nil
	}
	return fmt.Errorf("unknown Comment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommentMutation) ResetEdge(name string) error {
	switch name {
	case comment.EdgeUser:
		m.ResetUser()
		return nil
	case comment.EdgeReview:
		m.ResetReview()
		return nil
	}
	return fmt.Errorf("unknown Comment edge %s", name)
}

// DashboardMutation represents an operation that mutates the Dashboard nodes in the graph.
type DashboardMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	logged_users       *string
	new_users_24_hours *string
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*Dashboard, error)
	predicates         []predicate.Dashboard
}

var _ ent.Mutation = (*DashboardMutation)(nil)

// dashboardOption allows management of the mutation configuration using functional options.
type dashboardOption func(*DashboardMutation)

// newDashboardMutation creates new mutation for the Dashboard entity.
func newDashboardMutation(c config, op Op, opts ...dashboardOption) *DashboardMutation {
	m := &DashboardMutation{
		config:        c,
		op:            op,
		typ:           TypeDashboard,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDashboardID sets the ID field of the mutation.
func withDashboardID(id int) dashboardOption {
	return func(m *DashboardMutation) {
		var (
			err   error
			once  sync.Once
			value *Dashboard
		)
		m.oldValue = func(ctx context.Context) (*Dashboard, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dashboard.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDashboard sets the old Dashboard of the mutation.
func withDashboard(node *Dashboard) dashboardOption {
	return func(m *DashboardMutation) {
		m.oldValue = func(context.Context) (*Dashboard, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DashboardMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DashboardMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DashboardMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DashboardMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Dashboard.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLoggedUsers sets the "logged_users" field.
func (m *DashboardMutation) SetLoggedUsers(s string) {
	m.logged_users = &s
}

// LoggedUsers returns the value of the "logged_users" field in the mutation.
func (m *DashboardMutation) LoggedUsers() (r string, exists bool) {
	v := m.logged_users
	if v == nil {
		return
	}
	return *v, true
}

// OldLoggedUsers returns the old "logged_users" field's value of the Dashboard entity.
// If the Dashboard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DashboardMutation) OldLoggedUsers(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoggedUsers is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoggedUsers requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoggedUsers: %w", err)
	}
	return oldValue.LoggedUsers, nil
}

// ResetLoggedUsers resets all changes to the "logged_users" field.
func (m *DashboardMutation) ResetLoggedUsers() {
	m.logged_users = nil
}

// SetNewUsers24Hours sets the "new_users_24_hours" field.
func (m *DashboardMutation) SetNewUsers24Hours(s string) {
	m.new_users_24_hours = &s
}

// NewUsers24Hours returns the value of the "new_users_24_hours" field in the mutation.
func (m *DashboardMutation) NewUsers24Hours() (r string, exists bool) {
	v := m.new_users_24_hours
	if v == nil {
		return
	}
	return *v, true
}

// OldNewUsers24Hours returns the old "new_users_24_hours" field's value of the Dashboard entity.
// If the Dashboard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DashboardMutation) OldNewUsers24Hours(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNewUsers24Hours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNewUsers24Hours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNewUsers24Hours: %w", err)
	}
	return oldValue.NewUsers24Hours, nil
}

// ResetNewUsers24Hours resets all changes to the "new_users_24_hours" field.
func (m *DashboardMutation) ResetNewUsers24Hours() {
	m.new_users_24_hours = nil
}

// Where appends a list predicates to the DashboardMutation builder.
func (m *DashboardMutation) Where(ps ...predicate.Dashboard) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DashboardMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Dashboard).
func (m *DashboardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DashboardMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.logged_users != nil {
		fields = append(fields, dashboard.FieldLoggedUsers)
	}
	if m.new_users_24_hours != nil {
		fields = append(fields, dashboard.FieldNewUsers24Hours)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DashboardMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dashboard.FieldLoggedUsers:
		return m.LoggedUsers()
	case dashboard.FieldNewUsers24Hours:
		return m.NewUsers24Hours()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DashboardMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dashboard.FieldLoggedUsers:
		return m.OldLoggedUsers(ctx)
	case dashboard.FieldNewUsers24Hours:
		return m.OldNewUsers24Hours(ctx)
	}
	return nil, fmt.Errorf("unknown Dashboard field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DashboardMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dashboard.FieldLoggedUsers:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoggedUsers(v)
		return nil
	case dashboard.FieldNewUsers24Hours:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNewUsers24Hours(v)
		return nil
	}
	return fmt.Errorf("unknown Dashboard field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DashboardMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DashboardMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DashboardMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dashboard numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DashboardMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DashboardMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DashboardMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dashboard nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DashboardMutation) ResetField(name string) error {
	switch name {
	case dashboard.FieldLoggedUsers:
		m.ResetLoggedUsers()
		return nil
	case dashboard.FieldNewUsers24Hours:
		m.ResetNewUsers24Hours()
		return nil
	}
	return fmt.Errorf("unknown Dashboard field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DashboardMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DashboardMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DashboardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DashboardMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DashboardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DashboardMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DashboardMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Dashboard unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DashboardMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Dashboard edge %s", name)
}

// DirectorMutation represents an operation that mutates the Director nodes in the graph.
type DirectorMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	profileImage  *string
	bornAt        *string
	description   *string
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	movies        map[int]struct{}
	removedmovies map[int]struct{}
	clearedmovies bool
	done          bool
	oldValue      func(context.Context) (*Director, error)
	predicates    []predicate.Director
}

var _ ent.Mutation = (*DirectorMutation)(nil)

// directorOption allows management of the mutation configuration using functional options.
type directorOption func(*DirectorMutation)

// newDirectorMutation creates new mutation for the Director entity.
func newDirectorMutation(c config, op Op, opts ...directorOption) *DirectorMutation {
	m := &DirectorMutation{
		config:        c,
		op:            op,
		typ:           TypeDirector,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDirectorID sets the ID field of the mutation.
func withDirectorID(id int) directorOption {
	return func(m *DirectorMutation) {
		var (
			err   error
			once  sync.Once
			value *Director
		)
		m.oldValue = func(ctx context.Context) (*Director, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Director.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDirector sets the old Director of the mutation.
func withDirector(node *Director) directorOption {
	return func(m *DirectorMutation) {
		m.oldValue = func(context.Context) (*Director, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DirectorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DirectorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DirectorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DirectorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Director.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DirectorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DirectorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Director entity.
// If the Director object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirectorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DirectorMutation) ResetName() {
	m.name = nil
}

// SetProfileImage sets the "profileImage" field.
func (m *DirectorMutation) SetProfileImage(s string) {
	m.profileImage = &s
}

// ProfileImage returns the value of the "profileImage" field in the mutation.
func (m *DirectorMutation) ProfileImage() (r string, exists bool) {
	v := m.profileImage
	if v == nil {
		return
	}
	return *v, true
}

// OldProfileImage returns the old "profileImage" field's value of the Director entity.
// If the Director object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirectorMutation) OldProfileImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfileImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfileImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfileImage: %w", err)
	}
	return oldValue.ProfileImage, nil
}

// ResetProfileImage resets all changes to the "profileImage" field.
func (m *DirectorMutation) ResetProfileImage() {
	m.profileImage = nil
}

// SetBornAt sets the "bornAt" field.
func (m *DirectorMutation) SetBornAt(s string) {
	m.bornAt = &s
}

// BornAt returns the value of the "bornAt" field in the mutation.
func (m *DirectorMutation) BornAt() (r string, exists bool) {
	v := m.bornAt
	if v == nil {
		return
	}
	return *v, true
}

// OldBornAt returns the old "bornAt" field's value of the Director entity.
// If the Director object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirectorMutation) OldBornAt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBornAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBornAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBornAt: %w", err)
	}
	return oldValue.BornAt, nil
}

// ResetBornAt resets all changes to the "bornAt" field.
func (m *DirectorMutation) ResetBornAt() {
	m.bornAt = nil
}

// SetDescription sets the "description" field.
func (m *DirectorMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DirectorMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Director entity.
// If the Director object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirectorMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *DirectorMutation) ResetDescription() {
	m.description = nil
}

// SetUserID sets the "user_id" field.
func (m *DirectorMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *DirectorMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Director entity.
// If the Director object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirectorMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *DirectorMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[director.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *DirectorMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[director.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *DirectorMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, director.FieldUserID)
}

// ClearUser clears the "user" edge to the User entity.
func (m *DirectorMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *DirectorMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *DirectorMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *DirectorMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddMovieIDs adds the "movies" edge to the Movie entity by ids.
func (m *DirectorMutation) AddMovieIDs(ids ...int) {
	if m.movies == nil {
		m.movies = make(map[int]struct{})
	}
	for i := range ids {
		m.movies[ids[i]] = struct{}{}
	}
}

// ClearMovies clears the "movies" edge to the Movie entity.
func (m *DirectorMutation) ClearMovies() {
	m.clearedmovies = true
}

// MoviesCleared reports if the "movies" edge to the Movie entity was cleared.
func (m *DirectorMutation) MoviesCleared() bool {
	return m.clearedmovies
}

// RemoveMovieIDs removes the "movies" edge to the Movie entity by IDs.
func (m *DirectorMutation) RemoveMovieIDs(ids ...int) {
	if m.removedmovies == nil {
		m.removedmovies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.movies, ids[i])
		m.removedmovies[ids[i]] = struct{}{}
	}
}

// RemovedMovies returns the removed IDs of the "movies" edge to the Movie entity.
func (m *DirectorMutation) RemovedMoviesIDs() (ids []int) {
	for id := range m.removedmovies {
		ids = append(ids, id)
	}
	return
}

// MoviesIDs returns the "movies" edge IDs in the mutation.
func (m *DirectorMutation) MoviesIDs() (ids []int) {
	for id := range m.movies {
		ids = append(ids, id)
	}
	return
}

// ResetMovies resets all changes to the "movies" edge.
func (m *DirectorMutation) ResetMovies() {
	m.movies = nil
	m.clearedmovies = false
	m.removedmovies = nil
}

// Where appends a list predicates to the DirectorMutation builder.
func (m *DirectorMutation) Where(ps ...predicate.Director) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DirectorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Director).
func (m *DirectorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DirectorMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, director.FieldName)
	}
	if m.profileImage != nil {
		fields = append(fields, director.FieldProfileImage)
	}
	if m.bornAt != nil {
		fields = append(fields, director.FieldBornAt)
	}
	if m.description != nil {
		fields = append(fields, director.FieldDescription)
	}
	if m.user != nil {
		fields = append(fields, director.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DirectorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case director.FieldName:
		return m.Name()
	case director.FieldProfileImage:
		return m.ProfileImage()
	case director.FieldBornAt:
		return m.BornAt()
	case director.FieldDescription:
		return m.Description()
	case director.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DirectorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case director.FieldName:
		return m.OldName(ctx)
	case director.FieldProfileImage:
		return m.OldProfileImage(ctx)
	case director.FieldBornAt:
		return m.OldBornAt(ctx)
	case director.FieldDescription:
		return m.OldDescription(ctx)
	case director.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Director field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DirectorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case director.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case director.FieldProfileImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfileImage(v)
		return nil
	case director.FieldBornAt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBornAt(v)
		return nil
	case director.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case director.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Director field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DirectorMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DirectorMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DirectorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Director numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DirectorMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(director.FieldUserID) {
		fields = append(fields, director.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DirectorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DirectorMutation) ClearField(name string) error {
	switch name {
	case director.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown Director nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DirectorMutation) ResetField(name string) error {
	switch name {
	case director.FieldName:
		m.ResetName()
		return nil
	case director.FieldProfileImage:
		m.ResetProfileImage()
		return nil
	case director.FieldBornAt:
		m.ResetBornAt()
		return nil
	case director.FieldDescription:
		m.ResetDescription()
		return nil
	case director.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Director field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DirectorMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, director.EdgeUser)
	}
	if m.movies != nil {
		edges = append(edges, director.EdgeMovies)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DirectorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case director.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case director.EdgeMovies:
		ids := make([]ent.Value, 0, len(m.movies))
		for id := range m.movies {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DirectorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmovies != nil {
		edges = append(edges, director.EdgeMovies)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DirectorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case director.EdgeMovies:
		ids := make([]ent.Value, 0, len(m.removedmovies))
		for id := range m.removedmovies {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DirectorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, director.EdgeUser)
	}
	if m.clearedmovies {
		edges = append(edges, director.EdgeMovies)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DirectorMutation) EdgeCleared(name string) bool {
	switch name {
	case director.EdgeUser:
		return m.cleareduser
	case director.EdgeMovies:
		return m.clearedmovies
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DirectorMutation) ClearEdge(name string) error {
	switch name {
	case director.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Director unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DirectorMutation) ResetEdge(name string) error {
	switch name {
	case director.EdgeUser:
		m.ResetUser()
		return nil
	case director.EdgeMovies:
		m.ResetMovies()
		return nil
	}
	return fmt.Errorf("unknown Director edge %s", name)
}

// FavoriteMutation represents an operation that mutates the Favorite nodes in the graph.
type FavoriteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	movie_title   *string
	movie_image   *string
	movie_id      *int
	addmovie_id   *int
	user_id       *int
	adduser_id    *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Favorite, error)
	predicates    []predicate.Favorite
}

var _ ent.Mutation = (*FavoriteMutation)(nil)

// favoriteOption allows management of the mutation configuration using functional options.
type favoriteOption func(*FavoriteMutation)

// newFavoriteMutation creates new mutation for the Favorite entity.
func newFavoriteMutation(c config, op Op, opts ...favoriteOption) *FavoriteMutation {
	m := &FavoriteMutation{
		config:        c,
		op:            op,
		typ:           TypeFavorite,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFavoriteID sets the ID field of the mutation.
func withFavoriteID(id int) favoriteOption {
	return func(m *FavoriteMutation) {
		var (
			err   error
			once  sync.Once
			value *Favorite
		)
		m.oldValue = func(ctx context.Context) (*Favorite, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Favorite.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFavorite sets the old Favorite of the mutation.
func withFavorite(node *Favorite) favoriteOption {
	return func(m *FavoriteMutation) {
		m.oldValue = func(context.Context) (*Favorite, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FavoriteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FavoriteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FavoriteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FavoriteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Favorite.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMovieTitle sets the "movie_title" field.
func (m *FavoriteMutation) SetMovieTitle(s string) {
	m.movie_title = &s
}

// MovieTitle returns the value of the "movie_title" field in the mutation.
func (m *FavoriteMutation) MovieTitle() (r string, exists bool) {
	v := m.movie_title
	if v == nil {
		return
	}
	return *v, true
}

// OldMovieTitle returns the old "movie_title" field's value of the Favorite entity.
// If the Favorite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FavoriteMutation) OldMovieTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMovieTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMovieTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMovieTitle: %w", err)
	}
	return oldValue.MovieTitle, nil
}

// ResetMovieTitle resets all changes to the "movie_title" field.
func (m *FavoriteMutation) ResetMovieTitle() {
	m.movie_title = nil
}

// SetMovieImage sets the "movie_image" field.
func (m *FavoriteMutation) SetMovieImage(s string) {
	m.movie_image = &s
}

// MovieImage returns the value of the "movie_image" field in the mutation.
func (m *FavoriteMutation) MovieImage() (r string, exists bool) {
	v := m.movie_image
	if v == nil {
		return
	}
	return *v, true
}

// OldMovieImage returns the old "movie_image" field's value of the Favorite entity.
// If the Favorite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FavoriteMutation) OldMovieImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMovieImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMovieImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMovieImage: %w", err)
	}
	return oldValue.MovieImage, nil
}

// ResetMovieImage resets all changes to the "movie_image" field.
func (m *FavoriteMutation) ResetMovieImage() {
	m.movie_image = nil
}

// SetMovieID sets the "movie_id" field.
func (m *FavoriteMutation) SetMovieID(i int) {
	m.movie_id = &i
	m.addmovie_id = nil
}

// MovieID returns the value of the "movie_id" field in the mutation.
func (m *FavoriteMutation) MovieID() (r int, exists bool) {
	v := m.movie_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMovieID returns the old "movie_id" field's value of the Favorite entity.
// If the Favorite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FavoriteMutation) OldMovieID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMovieID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMovieID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMovieID: %w", err)
	}
	return oldValue.MovieID, nil
}

// AddMovieID adds i to the "movie_id" field.
func (m *FavoriteMutation) AddMovieID(i int) {
	if m.addmovie_id != nil {
		*m.addmovie_id += i
	} else {
		m.addmovie_id = &i
	}
}

// AddedMovieID returns the value that was added to the "movie_id" field in this mutation.
func (m *FavoriteMutation) AddedMovieID() (r int, exists bool) {
	v := m.addmovie_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetMovieID resets all changes to the "movie_id" field.
func (m *FavoriteMutation) ResetMovieID() {
	m.movie_id = nil
	m.addmovie_id = nil
}

// SetUserID sets the "user_id" field.
func (m *FavoriteMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *FavoriteMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Favorite entity.
// If the Favorite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FavoriteMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *FavoriteMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *FavoriteMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *FavoriteMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// Where appends a list predicates to the FavoriteMutation builder.
func (m *FavoriteMutation) Where(ps ...predicate.Favorite) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FavoriteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Favorite).
func (m *FavoriteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FavoriteMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.movie_title != nil {
		fields = append(fields, favorite.FieldMovieTitle)
	}
	if m.movie_image != nil {
		fields = append(fields, favorite.FieldMovieImage)
	}
	if m.movie_id != nil {
		fields = append(fields, favorite.FieldMovieID)
	}
	if m.user_id != nil {
		fields = append(fields, favorite.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FavoriteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case favorite.FieldMovieTitle:
		return m.MovieTitle()
	case favorite.FieldMovieImage:
		return m.MovieImage()
	case favorite.FieldMovieID:
		return m.MovieID()
	case favorite.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FavoriteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case favorite.FieldMovieTitle:
		return m.OldMovieTitle(ctx)
	case favorite.FieldMovieImage:
		return m.OldMovieImage(ctx)
	case favorite.FieldMovieID:
		return m.OldMovieID(ctx)
	case favorite.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Favorite field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FavoriteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case favorite.FieldMovieTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMovieTitle(v)
		return nil
	case favorite.FieldMovieImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMovieImage(v)
		return nil
	case favorite.FieldMovieID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMovieID(v)
		return nil
	case favorite.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Favorite field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FavoriteMutation) AddedFields() []string {
	var fields []string
	if m.addmovie_id != nil {
		fields = append(fields, favorite.FieldMovieID)
	}
	if m.adduser_id != nil {
		fields = append(fields, favorite.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FavoriteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case favorite.FieldMovieID:
		return m.AddedMovieID()
	case favorite.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FavoriteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case favorite.FieldMovieID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMovieID(v)
		return nil
	case favorite.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Favorite numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FavoriteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FavoriteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FavoriteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Favorite nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FavoriteMutation) ResetField(name string) error {
	switch name {
	case favorite.FieldMovieTitle:
		m.ResetMovieTitle()
		return nil
	case favorite.FieldMovieImage:
		m.ResetMovieImage()
		return nil
	case favorite.FieldMovieID:
		m.ResetMovieID()
		return nil
	case favorite.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Favorite field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FavoriteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FavoriteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FavoriteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FavoriteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FavoriteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FavoriteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FavoriteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Favorite unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FavoriteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Favorite edge %s", name)
}

// LikeMutation represents an operation that mutates the Like nodes in the graph.
type LikeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	user_id       *int
	adduser_id    *int
	review_id     *int
	addreview_id  *int
	clearedFields map[string]struct{}
	user          map[int]struct{}
	removeduser   map[int]struct{}
	cleareduser   bool
	review        map[int]struct{}
	removedreview map[int]struct{}
	clearedreview bool
	done          bool
	oldValue      func(context.Context) (*Like, error)
	predicates    []predicate.Like
}

var _ ent.Mutation = (*LikeMutation)(nil)

// likeOption allows management of the mutation configuration using functional options.
type likeOption func(*LikeMutation)

// newLikeMutation creates new mutation for the Like entity.
func newLikeMutation(c config, op Op, opts ...likeOption) *LikeMutation {
	m := &LikeMutation{
		config:        c,
		op:            op,
		typ:           TypeLike,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLikeID sets the ID field of the mutation.
func withLikeID(id int) likeOption {
	return func(m *LikeMutation) {
		var (
			err   error
			once  sync.Once
			value *Like
		)
		m.oldValue = func(ctx context.Context) (*Like, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Like.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLike sets the old Like of the mutation.
func withLike(node *Like) likeOption {
	return func(m *LikeMutation) {
		m.oldValue = func(context.Context) (*Like, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LikeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LikeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LikeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LikeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Like.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *LikeMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *LikeMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Like entity.
// If the Like object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LikeMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *LikeMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *LikeMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *LikeMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetReviewID sets the "review_id" field.
func (m *LikeMutation) SetReviewID(i int) {
	m.review_id = &i
	m.addreview_id = nil
}

// ReviewID returns the value of the "review_id" field in the mutation.
func (m *LikeMutation) ReviewID() (r int, exists bool) {
	v := m.review_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewID returns the old "review_id" field's value of the Like entity.
// If the Like object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LikeMutation) OldReviewID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReviewID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReviewID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewID: %w", err)
	}
	return oldValue.ReviewID, nil
}

// AddReviewID adds i to the "review_id" field.
func (m *LikeMutation) AddReviewID(i int) {
	if m.addreview_id != nil {
		*m.addreview_id += i
	} else {
		m.addreview_id = &i
	}
}

// AddedReviewID returns the value that was added to the "review_id" field in this mutation.
func (m *LikeMutation) AddedReviewID() (r int, exists bool) {
	v := m.addreview_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetReviewID resets all changes to the "review_id" field.
func (m *LikeMutation) ResetReviewID() {
	m.review_id = nil
	m.addreview_id = nil
}

// AddUserIDs adds the "user" edge to the User entity by ids.
func (m *LikeMutation) AddUserIDs(ids ...int) {
	if m.user == nil {
		m.user = make(map[int]struct{})
	}
	for i := range ids {
		m.user[ids[i]] = struct{}{}
	}
}

// ClearUser clears the "user" edge to the User entity.
func (m *LikeMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *LikeMutation) UserCleared() bool {
	return m.cleareduser
}

// RemoveUserIDs removes the "user" edge to the User entity by IDs.
func (m *LikeMutation) RemoveUserIDs(ids ...int) {
	if m.removeduser == nil {
		m.removeduser = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user, ids[i])
		m.removeduser[ids[i]] = struct{}{}
	}
}

// RemovedUser returns the removed IDs of the "user" edge to the User entity.
func (m *LikeMutation) RemovedUserIDs() (ids []int) {
	for id := range m.removeduser {
		ids = append(ids, id)
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
func (m *LikeMutation) UserIDs() (ids []int) {
	for id := range m.user {
		ids = append(ids, id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *LikeMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
	m.removeduser = nil
}

// AddReviewIDs adds the "review" edge to the Review entity by ids.
func (m *LikeMutation) AddReviewIDs(ids ...int) {
	if m.review == nil {
		m.review = make(map[int]struct{})
	}
	for i := range ids {
		m.review[ids[i]] = struct{}{}
	}
}

// ClearReview clears the "review" edge to the Review entity.
func (m *LikeMutation) ClearReview() {
	m.clearedreview = true
}

// ReviewCleared reports if the "review" edge to the Review entity was cleared.
func (m *LikeMutation) ReviewCleared() bool {
	return m.clearedreview
}

// RemoveReviewIDs removes the "review" edge to the Review entity by IDs.
func (m *LikeMutation) RemoveReviewIDs(ids ...int) {
	if m.removedreview == nil {
		m.removedreview = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.review, ids[i])
		m.removedreview[ids[i]] = struct{}{}
	}
}

// RemovedReview returns the removed IDs of the "review" edge to the Review entity.
func (m *LikeMutation) RemovedReviewIDs() (ids []int) {
	for id := range m.removedreview {
		ids = append(ids, id)
	}
	return
}

// ReviewIDs returns the "review" edge IDs in the mutation.
func (m *LikeMutation) ReviewIDs() (ids []int) {
	for id := range m.review {
		ids = append(ids, id)
	}
	return
}

// ResetReview resets all changes to the "review" edge.
func (m *LikeMutation) ResetReview() {
	m.review = nil
	m.clearedreview = false
	m.removedreview = nil
}

// Where appends a list predicates to the LikeMutation builder.
func (m *LikeMutation) Where(ps ...predicate.Like) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LikeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Like).
func (m *LikeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LikeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.user_id != nil {
		fields = append(fields, like.FieldUserID)
	}
	if m.review_id != nil {
		fields = append(fields, like.FieldReviewID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LikeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case like.FieldUserID:
		return m.UserID()
	case like.FieldReviewID:
		return m.ReviewID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LikeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case like.FieldUserID:
		return m.OldUserID(ctx)
	case like.FieldReviewID:
		return m.OldReviewID(ctx)
	}
	return nil, fmt.Errorf("unknown Like field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case like.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case like.FieldReviewID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewID(v)
		return nil
	}
	return fmt.Errorf("unknown Like field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LikeMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, like.FieldUserID)
	}
	if m.addreview_id != nil {
		fields = append(fields, like.FieldReviewID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LikeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case like.FieldUserID:
		return m.AddedUserID()
	case like.FieldReviewID:
		return m.AddedReviewID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case like.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case like.FieldReviewID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReviewID(v)
		return nil
	}
	return fmt.Errorf("unknown Like numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LikeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LikeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LikeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Like nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LikeMutation) ResetField(name string) error {
	switch name {
	case like.FieldUserID:
		m.ResetUserID()
		return nil
	case like.FieldReviewID:
		m.ResetReviewID()
		return nil
	}
	return fmt.Errorf("unknown Like field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LikeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, like.EdgeUser)
	}
	if m.review != nil {
		edges = append(edges, like.EdgeReview)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LikeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case like.EdgeUser:
		ids := make([]ent.Value, 0, len(m.user))
		for id := range m.user {
			ids = append(ids, id)
		}
		return ids
	case like.EdgeReview:
		ids := make([]ent.Value, 0, len(m.review))
		for id := range m.review {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LikeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeduser != nil {
		edges = append(edges, like.EdgeUser)
	}
	if m.removedreview != nil {
		edges = append(edges, like.EdgeReview)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LikeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case like.EdgeUser:
		ids := make([]ent.Value, 0, len(m.removeduser))
		for id := range m.removeduser {
			ids = append(ids, id)
		}
		return ids
	case like.EdgeReview:
		ids := make([]ent.Value, 0, len(m.removedreview))
		for id := range m.removedreview {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LikeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, like.EdgeUser)
	}
	if m.clearedreview {
		edges = append(edges, like.EdgeReview)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LikeMutation) EdgeCleared(name string) bool {
	switch name {
	case like.EdgeUser:
		return m.cleareduser
	case like.EdgeReview:
		return m.clearedreview
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LikeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Like unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LikeMutation) ResetEdge(name string) error {
	switch name {
	case like.EdgeUser:
		m.ResetUser()
		return nil
	case like.EdgeReview:
		m.ResetReview()
		return nil
	}
	return fmt.Errorf("unknown Like edge %s", name)
}

// MovieMutation represents an operation that mutates the Movie nodes in the graph.
type MovieMutation struct {
	config
	op              Op
	typ             string
	id              *int
	title           *string
	description     *string
	rank            *int
	addrank         *int
	genre           *string
	year            *int
	addyear         *int
	image           *string
	created_at      *string
	clearedFields   map[string]struct{}
	director        *int
	cleareddirector bool
	user            *int
	cleareduser     bool
	reviews         map[int]struct{}
	removedreviews  map[int]struct{}
	clearedreviews  bool
	actor           map[int]struct{}
	removedactor    map[int]struct{}
	clearedactor    bool
	done            bool
	oldValue        func(context.Context) (*Movie, error)
	predicates      []predicate.Movie
}

var _ ent.Mutation = (*MovieMutation)(nil)

// movieOption allows management of the mutation configuration using functional options.
type movieOption func(*MovieMutation)

// newMovieMutation creates new mutation for the Movie entity.
func newMovieMutation(c config, op Op, opts ...movieOption) *MovieMutation {
	m := &MovieMutation{
		config:        c,
		op:            op,
		typ:           TypeMovie,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMovieID sets the ID field of the mutation.
func withMovieID(id int) movieOption {
	return func(m *MovieMutation) {
		var (
			err   error
			once  sync.Once
			value *Movie
		)
		m.oldValue = func(ctx context.Context) (*Movie, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Movie.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMovie sets the old Movie of the mutation.
func withMovie(node *Movie) movieOption {
	return func(m *MovieMutation) {
		m.oldValue = func(context.Context) (*Movie, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MovieMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MovieMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MovieMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MovieMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Movie.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *MovieMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *MovieMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *MovieMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *MovieMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MovieMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *MovieMutation) ResetDescription() {
	m.description = nil
}

// SetRank sets the "rank" field.
func (m *MovieMutation) SetRank(i int) {
	m.rank = &i
	m.addrank = nil
}

// Rank returns the value of the "rank" field in the mutation.
func (m *MovieMutation) Rank() (r int, exists bool) {
	v := m.rank
	if v == nil {
		return
	}
	return *v, true
}

// OldRank returns the old "rank" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldRank(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRank is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRank requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRank: %w", err)
	}
	return oldValue.Rank, nil
}

// AddRank adds i to the "rank" field.
func (m *MovieMutation) AddRank(i int) {
	if m.addrank != nil {
		*m.addrank += i
	} else {
		m.addrank = &i
	}
}

// AddedRank returns the value that was added to the "rank" field in this mutation.
func (m *MovieMutation) AddedRank() (r int, exists bool) {
	v := m.addrank
	if v == nil {
		return
	}
	return *v, true
}

// ResetRank resets all changes to the "rank" field.
func (m *MovieMutation) ResetRank() {
	m.rank = nil
	m.addrank = nil
}

// SetGenre sets the "genre" field.
func (m *MovieMutation) SetGenre(s string) {
	m.genre = &s
}

// Genre returns the value of the "genre" field in the mutation.
func (m *MovieMutation) Genre() (r string, exists bool) {
	v := m.genre
	if v == nil {
		return
	}
	return *v, true
}

// OldGenre returns the old "genre" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldGenre(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenre is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenre requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenre: %w", err)
	}
	return oldValue.Genre, nil
}

// ResetGenre resets all changes to the "genre" field.
func (m *MovieMutation) ResetGenre() {
	m.genre = nil
}

// SetYear sets the "year" field.
func (m *MovieMutation) SetYear(i int) {
	m.year = &i
	m.addyear = nil
}

// Year returns the value of the "year" field in the mutation.
func (m *MovieMutation) Year() (r int, exists bool) {
	v := m.year
	if v == nil {
		return
	}
	return *v, true
}

// OldYear returns the old "year" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldYear: %w", err)
	}
	return oldValue.Year, nil
}

// AddYear adds i to the "year" field.
func (m *MovieMutation) AddYear(i int) {
	if m.addyear != nil {
		*m.addyear += i
	} else {
		m.addyear = &i
	}
}

// AddedYear returns the value that was added to the "year" field in this mutation.
func (m *MovieMutation) AddedYear() (r int, exists bool) {
	v := m.addyear
	if v == nil {
		return
	}
	return *v, true
}

// ResetYear resets all changes to the "year" field.
func (m *MovieMutation) ResetYear() {
	m.year = nil
	m.addyear = nil
}

// SetDirectorID sets the "director_id" field.
func (m *MovieMutation) SetDirectorID(i int) {
	m.director = &i
}

// DirectorID returns the value of the "director_id" field in the mutation.
func (m *MovieMutation) DirectorID() (r int, exists bool) {
	v := m.director
	if v == nil {
		return
	}
	return *v, true
}

// OldDirectorID returns the old "director_id" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldDirectorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDirectorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDirectorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDirectorID: %w", err)
	}
	return oldValue.DirectorID, nil
}

// ClearDirectorID clears the value of the "director_id" field.
func (m *MovieMutation) ClearDirectorID() {
	m.director = nil
	m.clearedFields[movie.FieldDirectorID] = struct{}{}
}

// DirectorIDCleared returns if the "director_id" field was cleared in this mutation.
func (m *MovieMutation) DirectorIDCleared() bool {
	_, ok := m.clearedFields[movie.FieldDirectorID]
	return ok
}

// ResetDirectorID resets all changes to the "director_id" field.
func (m *MovieMutation) ResetDirectorID() {
	m.director = nil
	delete(m.clearedFields, movie.FieldDirectorID)
}

// SetUserID sets the "user_id" field.
func (m *MovieMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *MovieMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *MovieMutation) ClearUserID() {
	m.user = nil
	m.clearedFields[movie.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *MovieMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[movie.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *MovieMutation) ResetUserID() {
	m.user = nil
	delete(m.clearedFields, movie.FieldUserID)
}

// SetImage sets the "image" field.
func (m *MovieMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *MovieMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ClearImage clears the value of the "image" field.
func (m *MovieMutation) ClearImage() {
	m.image = nil
	m.clearedFields[movie.FieldImage] = struct{}{}
}

// ImageCleared returns if the "image" field was cleared in this mutation.
func (m *MovieMutation) ImageCleared() bool {
	_, ok := m.clearedFields[movie.FieldImage]
	return ok
}

// ResetImage resets all changes to the "image" field.
func (m *MovieMutation) ResetImage() {
	m.image = nil
	delete(m.clearedFields, movie.FieldImage)
}

// SetCreatedAt sets the "created_at" field.
func (m *MovieMutation) SetCreatedAt(s string) {
	m.created_at = &s
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MovieMutation) CreatedAt() (r string, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldCreatedAt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MovieMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearDirector clears the "director" edge to the Director entity.
func (m *MovieMutation) ClearDirector() {
	m.cleareddirector = true
}

// DirectorCleared reports if the "director" edge to the Director entity was cleared.
func (m *MovieMutation) DirectorCleared() bool {
	return m.DirectorIDCleared() || m.cleareddirector
}

// DirectorIDs returns the "director" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DirectorID instead. It exists only for internal usage by the builders.
func (m *MovieMutation) DirectorIDs() (ids []int) {
	if id := m.director; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDirector resets all changes to the "director" edge.
func (m *MovieMutation) ResetDirector() {
	m.director = nil
	m.cleareddirector = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *MovieMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *MovieMutation) UserCleared() bool {
	return m.UserIDCleared() || m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *MovieMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *MovieMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddReviewIDs adds the "reviews" edge to the Review entity by ids.
func (m *MovieMutation) AddReviewIDs(ids ...int) {
	if m.reviews == nil {
		m.reviews = make(map[int]struct{})
	}
	for i := range ids {
		m.reviews[ids[i]] = struct{}{}
	}
}

// ClearReviews clears the "reviews" edge to the Review entity.
func (m *MovieMutation) ClearReviews() {
	m.clearedreviews = true
}

// ReviewsCleared reports if the "reviews" edge to the Review entity was cleared.
func (m *MovieMutation) ReviewsCleared() bool {
	return m.clearedreviews
}

// RemoveReviewIDs removes the "reviews" edge to the Review entity by IDs.
func (m *MovieMutation) RemoveReviewIDs(ids ...int) {
	if m.removedreviews == nil {
		m.removedreviews = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.reviews, ids[i])
		m.removedreviews[ids[i]] = struct{}{}
	}
}

// RemovedReviews returns the removed IDs of the "reviews" edge to the Review entity.
func (m *MovieMutation) RemovedReviewsIDs() (ids []int) {
	for id := range m.removedreviews {
		ids = append(ids, id)
	}
	return
}

// ReviewsIDs returns the "reviews" edge IDs in the mutation.
func (m *MovieMutation) ReviewsIDs() (ids []int) {
	for id := range m.reviews {
		ids = append(ids, id)
	}
	return
}

// ResetReviews resets all changes to the "reviews" edge.
func (m *MovieMutation) ResetReviews() {
	m.reviews = nil
	m.clearedreviews = false
	m.removedreviews = nil
}

// AddActorIDs adds the "actor" edge to the Actor entity by ids.
func (m *MovieMutation) AddActorIDs(ids ...int) {
	if m.actor == nil {
		m.actor = make(map[int]struct{})
	}
	for i := range ids {
		m.actor[ids[i]] = struct{}{}
	}
}

// ClearActor clears the "actor" edge to the Actor entity.
func (m *MovieMutation) ClearActor() {
	m.clearedactor = true
}

// ActorCleared reports if the "actor" edge to the Actor entity was cleared.
func (m *MovieMutation) ActorCleared() bool {
	return m.clearedactor
}

// RemoveActorIDs removes the "actor" edge to the Actor entity by IDs.
func (m *MovieMutation) RemoveActorIDs(ids ...int) {
	if m.removedactor == nil {
		m.removedactor = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.actor, ids[i])
		m.removedactor[ids[i]] = struct{}{}
	}
}

// RemovedActor returns the removed IDs of the "actor" edge to the Actor entity.
func (m *MovieMutation) RemovedActorIDs() (ids []int) {
	for id := range m.removedactor {
		ids = append(ids, id)
	}
	return
}

// ActorIDs returns the "actor" edge IDs in the mutation.
func (m *MovieMutation) ActorIDs() (ids []int) {
	for id := range m.actor {
		ids = append(ids, id)
	}
	return
}

// ResetActor resets all changes to the "actor" edge.
func (m *MovieMutation) ResetActor() {
	m.actor = nil
	m.clearedactor = false
	m.removedactor = nil
}

// Where appends a list predicates to the MovieMutation builder.
func (m *MovieMutation) Where(ps ...predicate.Movie) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MovieMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Movie).
func (m *MovieMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MovieMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.title != nil {
		fields = append(fields, movie.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, movie.FieldDescription)
	}
	if m.rank != nil {
		fields = append(fields, movie.FieldRank)
	}
	if m.genre != nil {
		fields = append(fields, movie.FieldGenre)
	}
	if m.year != nil {
		fields = append(fields, movie.FieldYear)
	}
	if m.director != nil {
		fields = append(fields, movie.FieldDirectorID)
	}
	if m.user != nil {
		fields = append(fields, movie.FieldUserID)
	}
	if m.image != nil {
		fields = append(fields, movie.FieldImage)
	}
	if m.created_at != nil {
		fields = append(fields, movie.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MovieMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case movie.FieldTitle:
		return m.Title()
	case movie.FieldDescription:
		return m.Description()
	case movie.FieldRank:
		return m.Rank()
	case movie.FieldGenre:
		return m.Genre()
	case movie.FieldYear:
		return m.Year()
	case movie.FieldDirectorID:
		return m.DirectorID()
	case movie.FieldUserID:
		return m.UserID()
	case movie.FieldImage:
		return m.Image()
	case movie.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MovieMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case movie.FieldTitle:
		return m.OldTitle(ctx)
	case movie.FieldDescription:
		return m.OldDescription(ctx)
	case movie.FieldRank:
		return m.OldRank(ctx)
	case movie.FieldGenre:
		return m.OldGenre(ctx)
	case movie.FieldYear:
		return m.OldYear(ctx)
	case movie.FieldDirectorID:
		return m.OldDirectorID(ctx)
	case movie.FieldUserID:
		return m.OldUserID(ctx)
	case movie.FieldImage:
		return m.OldImage(ctx)
	case movie.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Movie field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovieMutation) SetField(name string, value ent.Value) error {
	switch name {
	case movie.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case movie.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case movie.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRank(v)
		return nil
	case movie.FieldGenre:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenre(v)
		return nil
	case movie.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYear(v)
		return nil
	case movie.FieldDirectorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDirectorID(v)
		return nil
	case movie.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case movie.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case movie.FieldCreatedAt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Movie field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MovieMutation) AddedFields() []string {
	var fields []string
	if m.addrank != nil {
		fields = append(fields, movie.FieldRank)
	}
	if m.addyear != nil {
		fields = append(fields, movie.FieldYear)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MovieMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case movie.FieldRank:
		return m.AddedRank()
	case movie.FieldYear:
		return m.AddedYear()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovieMutation) AddField(name string, value ent.Value) error {
	switch name {
	case movie.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRank(v)
		return nil
	case movie.FieldYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddYear(v)
		return nil
	}
	return fmt.Errorf("unknown Movie numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MovieMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(movie.FieldDirectorID) {
		fields = append(fields, movie.FieldDirectorID)
	}
	if m.FieldCleared(movie.FieldUserID) {
		fields = append(fields, movie.FieldUserID)
	}
	if m.FieldCleared(movie.FieldImage) {
		fields = append(fields, movie.FieldImage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MovieMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MovieMutation) ClearField(name string) error {
	switch name {
	case movie.FieldDirectorID:
		m.ClearDirectorID()
		return nil
	case movie.FieldUserID:
		m.ClearUserID()
		return nil
	case movie.FieldImage:
		m.ClearImage()
		return nil
	}
	return fmt.Errorf("unknown Movie nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MovieMutation) ResetField(name string) error {
	switch name {
	case movie.FieldTitle:
		m.ResetTitle()
		return nil
	case movie.FieldDescription:
		m.ResetDescription()
		return nil
	case movie.FieldRank:
		m.ResetRank()
		return nil
	case movie.FieldGenre:
		m.ResetGenre()
		return nil
	case movie.FieldYear:
		m.ResetYear()
		return nil
	case movie.FieldDirectorID:
		m.ResetDirectorID()
		return nil
	case movie.FieldUserID:
		m.ResetUserID()
		return nil
	case movie.FieldImage:
		m.ResetImage()
		return nil
	case movie.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Movie field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MovieMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.director != nil {
		edges = append(edges, movie.EdgeDirector)
	}
	if m.user != nil {
		edges = append(edges, movie.EdgeUser)
	}
	if m.reviews != nil {
		edges = append(edges, movie.EdgeReviews)
	}
	if m.actor != nil {
		edges = append(edges, movie.EdgeActor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MovieMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case movie.EdgeDirector:
		if id := m.director; id != nil {
			return []ent.Value{*id}
		}
	case movie.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case movie.EdgeReviews:
		ids := make([]ent.Value, 0, len(m.reviews))
		for id := range m.reviews {
			ids = append(ids, id)
		}
		return ids
	case movie.EdgeActor:
		ids := make([]ent.Value, 0, len(m.actor))
		for id := range m.actor {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MovieMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedreviews != nil {
		edges = append(edges, movie.EdgeReviews)
	}
	if m.removedactor != nil {
		edges = append(edges, movie.EdgeActor)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MovieMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case movie.EdgeReviews:
		ids := make([]ent.Value, 0, len(m.removedreviews))
		for id := range m.removedreviews {
			ids = append(ids, id)
		}
		return ids
	case movie.EdgeActor:
		ids := make([]ent.Value, 0, len(m.removedactor))
		for id := range m.removedactor {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MovieMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareddirector {
		edges = append(edges, movie.EdgeDirector)
	}
	if m.cleareduser {
		edges = append(edges, movie.EdgeUser)
	}
	if m.clearedreviews {
		edges = append(edges, movie.EdgeReviews)
	}
	if m.clearedactor {
		edges = append(edges, movie.EdgeActor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MovieMutation) EdgeCleared(name string) bool {
	switch name {
	case movie.EdgeDirector:
		return m.cleareddirector
	case movie.EdgeUser:
		return m.cleareduser
	case movie.EdgeReviews:
		return m.clearedreviews
	case movie.EdgeActor:
		return m.clearedactor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MovieMutation) ClearEdge(name string) error {
	switch name {
	case movie.EdgeDirector:
		m.ClearDirector()
		return nil
	case movie.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Movie unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MovieMutation) ResetEdge(name string) error {
	switch name {
	case movie.EdgeDirector:
		m.ResetDirector()
		return nil
	case movie.EdgeUser:
		m.ResetUser()
		return nil
	case movie.EdgeReviews:
		m.ResetReviews()
		return nil
	case movie.EdgeActor:
		m.ResetActor()
		return nil
	}
	return fmt.Errorf("unknown Movie edge %s", name)
}

// ReviewMutation represents an operation that mutates the Review nodes in the graph.
type ReviewMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	topic              *string
	text               *string
	rank               *int
	addrank            *int
	num_of_likes       *int
	addnum_of_likes    *int
	num_of_comments    *int
	addnum_of_comments *int
	clearedFields      map[string]struct{}
	movie              *int
	clearedmovie       bool
	user               *int
	cleareduser        bool
	comments           map[int]struct{}
	removedcomments    map[int]struct{}
	clearedcomments    bool
	likes              map[int]struct{}
	removedlikes       map[int]struct{}
	clearedlikes       bool
	done               bool
	oldValue           func(context.Context) (*Review, error)
	predicates         []predicate.Review
}

var _ ent.Mutation = (*ReviewMutation)(nil)

// reviewOption allows management of the mutation configuration using functional options.
type reviewOption func(*ReviewMutation)

// newReviewMutation creates new mutation for the Review entity.
func newReviewMutation(c config, op Op, opts ...reviewOption) *ReviewMutation {
	m := &ReviewMutation{
		config:        c,
		op:            op,
		typ:           TypeReview,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReviewID sets the ID field of the mutation.
func withReviewID(id int) reviewOption {
	return func(m *ReviewMutation) {
		var (
			err   error
			once  sync.Once
			value *Review
		)
		m.oldValue = func(ctx context.Context) (*Review, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Review.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReview sets the old Review of the mutation.
func withReview(node *Review) reviewOption {
	return func(m *ReviewMutation) {
		m.oldValue = func(context.Context) (*Review, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReviewMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReviewMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReviewMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReviewMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Review.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTopic sets the "topic" field.
func (m *ReviewMutation) SetTopic(s string) {
	m.topic = &s
}

// Topic returns the value of the "topic" field in the mutation.
func (m *ReviewMutation) Topic() (r string, exists bool) {
	v := m.topic
	if v == nil {
		return
	}
	return *v, true
}

// OldTopic returns the old "topic" field's value of the Review entity.
// If the Review object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewMutation) OldTopic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopic: %w", err)
	}
	return oldValue.Topic, nil
}

// ResetTopic resets all changes to the "topic" field.
func (m *ReviewMutation) ResetTopic() {
	m.topic = nil
}

// SetText sets the "text" field.
func (m *ReviewMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *ReviewMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Review entity.
// If the Review object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *ReviewMutation) ResetText() {
	m.text = nil
}

// SetRank sets the "rank" field.
func (m *ReviewMutation) SetRank(i int) {
	m.rank = &i
	m.addrank = nil
}

// Rank returns the value of the "rank" field in the mutation.
func (m *ReviewMutation) Rank() (r int, exists bool) {
	v := m.rank
	if v == nil {
		return
	}
	return *v, true
}

// OldRank returns the old "rank" field's value of the Review entity.
// If the Review object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewMutation) OldRank(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRank is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRank requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRank: %w", err)
	}
	return oldValue.Rank, nil
}

// AddRank adds i to the "rank" field.
func (m *ReviewMutation) AddRank(i int) {
	if m.addrank != nil {
		*m.addrank += i
	} else {
		m.addrank = &i
	}
}

// AddedRank returns the value that was added to the "rank" field in this mutation.
func (m *ReviewMutation) AddedRank() (r int, exists bool) {
	v := m.addrank
	if v == nil {
		return
	}
	return *v, true
}

// ResetRank resets all changes to the "rank" field.
func (m *ReviewMutation) ResetRank() {
	m.rank = nil
	m.addrank = nil
}

// SetNumOfLikes sets the "num_of_likes" field.
func (m *ReviewMutation) SetNumOfLikes(i int) {
	m.num_of_likes = &i
	m.addnum_of_likes = nil
}

// NumOfLikes returns the value of the "num_of_likes" field in the mutation.
func (m *ReviewMutation) NumOfLikes() (r int, exists bool) {
	v := m.num_of_likes
	if v == nil {
		return
	}
	return *v, true
}

// OldNumOfLikes returns the old "num_of_likes" field's value of the Review entity.
// If the Review object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewMutation) OldNumOfLikes(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumOfLikes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumOfLikes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumOfLikes: %w", err)
	}
	return oldValue.NumOfLikes, nil
}

// AddNumOfLikes adds i to the "num_of_likes" field.
func (m *ReviewMutation) AddNumOfLikes(i int) {
	if m.addnum_of_likes != nil {
		*m.addnum_of_likes += i
	} else {
		m.addnum_of_likes = &i
	}
}

// AddedNumOfLikes returns the value that was added to the "num_of_likes" field in this mutation.
func (m *ReviewMutation) AddedNumOfLikes() (r int, exists bool) {
	v := m.addnum_of_likes
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumOfLikes resets all changes to the "num_of_likes" field.
func (m *ReviewMutation) ResetNumOfLikes() {
	m.num_of_likes = nil
	m.addnum_of_likes = nil
}

// SetNumOfComments sets the "num_of_comments" field.
func (m *ReviewMutation) SetNumOfComments(i int) {
	m.num_of_comments = &i
	m.addnum_of_comments = nil
}

// NumOfComments returns the value of the "num_of_comments" field in the mutation.
func (m *ReviewMutation) NumOfComments() (r int, exists bool) {
	v := m.num_of_comments
	if v == nil {
		return
	}
	return *v, true
}

// OldNumOfComments returns the old "num_of_comments" field's value of the Review entity.
// If the Review object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReviewMutation) OldNumOfComments(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumOfComments is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumOfComments requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumOfComments: %w", err)
	}
	return oldValue.NumOfComments, nil
}

// AddNumOfComments adds i to the "num_of_comments" field.
func (m *ReviewMutation) AddNumOfComments(i int) {
	if m.addnum_of_comments != nil {
		*m.addnum_of_comments += i
	} else {
		m.addnum_of_comments = &i
	}
}

// AddedNumOfComments returns the value that was added to the "num_of_comments" field in this mutation.
func (m *ReviewMutation) AddedNumOfComments() (r int, exists bool) {
	v := m.addnum_of_comments
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumOfComments resets all changes to the "num_of_comments" field.
func (m *ReviewMutation) ResetNumOfComments() {
	m.num_of_comments = nil
	m.addnum_of_comments = nil
}

// SetMovieID sets the "movie" edge to the Movie entity by id.
func (m *ReviewMutation) SetMovieID(id int) {
	m.movie = &id
}

// ClearMovie clears the "movie" edge to the Movie entity.
func (m *ReviewMutation) ClearMovie() {
	m.clearedmovie = true
}

// MovieCleared reports if the "movie" edge to the Movie entity was cleared.
func (m *ReviewMutation) MovieCleared() bool {
	return m.clearedmovie
}

// MovieID returns the "movie" edge ID in the mutation.
func (m *ReviewMutation) MovieID() (id int, exists bool) {
	if m.movie != nil {
		return *m.movie, true
	}
	return
}

// MovieIDs returns the "movie" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MovieID instead. It exists only for internal usage by the builders.
func (m *ReviewMutation) MovieIDs() (ids []int) {
	if id := m.movie; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMovie resets all changes to the "movie" edge.
func (m *ReviewMutation) ResetMovie() {
	m.movie = nil
	m.clearedmovie = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ReviewMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ReviewMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ReviewMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ReviewMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ReviewMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ReviewMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddCommentIDs adds the "comments" edge to the Comment entity by ids.
func (m *ReviewMutation) AddCommentIDs(ids ...int) {
	if m.comments == nil {
		m.comments = make(map[int]struct{})
	}
	for i := range ids {
		m.comments[ids[i]] = struct{}{}
	}
}

// ClearComments clears the "comments" edge to the Comment entity.
func (m *ReviewMutation) ClearComments() {
	m.clearedcomments = true
}

// CommentsCleared reports if the "comments" edge to the Comment entity was cleared.
func (m *ReviewMutation) CommentsCleared() bool {
	return m.clearedcomments
}

// RemoveCommentIDs removes the "comments" edge to the Comment entity by IDs.
func (m *ReviewMutation) RemoveCommentIDs(ids ...int) {
	if m.removedcomments == nil {
		m.removedcomments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.comments, ids[i])
		m.removedcomments[ids[i]] = struct{}{}
	}
}

// RemovedComments returns the removed IDs of the "comments" edge to the Comment entity.
func (m *ReviewMutation) RemovedCommentsIDs() (ids []int) {
	for id := range m.removedcomments {
		ids = append(ids, id)
	}
	return
}

// CommentsIDs returns the "comments" edge IDs in the mutation.
func (m *ReviewMutation) CommentsIDs() (ids []int) {
	for id := range m.comments {
		ids = append(ids, id)
	}
	return
}

// ResetComments resets all changes to the "comments" edge.
func (m *ReviewMutation) ResetComments() {
	m.comments = nil
	m.clearedcomments = false
	m.removedcomments = nil
}

// AddLikeIDs adds the "likes" edge to the Like entity by ids.
func (m *ReviewMutation) AddLikeIDs(ids ...int) {
	if m.likes == nil {
		m.likes = make(map[int]struct{})
	}
	for i := range ids {
		m.likes[ids[i]] = struct{}{}
	}
}

// ClearLikes clears the "likes" edge to the Like entity.
func (m *ReviewMutation) ClearLikes() {
	m.clearedlikes = true
}

// LikesCleared reports if the "likes" edge to the Like entity was cleared.
func (m *ReviewMutation) LikesCleared() bool {
	return m.clearedlikes
}

// RemoveLikeIDs removes the "likes" edge to the Like entity by IDs.
func (m *ReviewMutation) RemoveLikeIDs(ids ...int) {
	if m.removedlikes == nil {
		m.removedlikes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.likes, ids[i])
		m.removedlikes[ids[i]] = struct{}{}
	}
}

// RemovedLikes returns the removed IDs of the "likes" edge to the Like entity.
func (m *ReviewMutation) RemovedLikesIDs() (ids []int) {
	for id := range m.removedlikes {
		ids = append(ids, id)
	}
	return
}

// LikesIDs returns the "likes" edge IDs in the mutation.
func (m *ReviewMutation) LikesIDs() (ids []int) {
	for id := range m.likes {
		ids = append(ids, id)
	}
	return
}

// ResetLikes resets all changes to the "likes" edge.
func (m *ReviewMutation) ResetLikes() {
	m.likes = nil
	m.clearedlikes = false
	m.removedlikes = nil
}

// Where appends a list predicates to the ReviewMutation builder.
func (m *ReviewMutation) Where(ps ...predicate.Review) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ReviewMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Review).
func (m *ReviewMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReviewMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.topic != nil {
		fields = append(fields, review.FieldTopic)
	}
	if m.text != nil {
		fields = append(fields, review.FieldText)
	}
	if m.rank != nil {
		fields = append(fields, review.FieldRank)
	}
	if m.num_of_likes != nil {
		fields = append(fields, review.FieldNumOfLikes)
	}
	if m.num_of_comments != nil {
		fields = append(fields, review.FieldNumOfComments)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReviewMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case review.FieldTopic:
		return m.Topic()
	case review.FieldText:
		return m.Text()
	case review.FieldRank:
		return m.Rank()
	case review.FieldNumOfLikes:
		return m.NumOfLikes()
	case review.FieldNumOfComments:
		return m.NumOfComments()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReviewMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case review.FieldTopic:
		return m.OldTopic(ctx)
	case review.FieldText:
		return m.OldText(ctx)
	case review.FieldRank:
		return m.OldRank(ctx)
	case review.FieldNumOfLikes:
		return m.OldNumOfLikes(ctx)
	case review.FieldNumOfComments:
		return m.OldNumOfComments(ctx)
	}
	return nil, fmt.Errorf("unknown Review field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReviewMutation) SetField(name string, value ent.Value) error {
	switch name {
	case review.FieldTopic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopic(v)
		return nil
	case review.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case review.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRank(v)
		return nil
	case review.FieldNumOfLikes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumOfLikes(v)
		return nil
	case review.FieldNumOfComments:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumOfComments(v)
		return nil
	}
	return fmt.Errorf("unknown Review field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReviewMutation) AddedFields() []string {
	var fields []string
	if m.addrank != nil {
		fields = append(fields, review.FieldRank)
	}
	if m.addnum_of_likes != nil {
		fields = append(fields, review.FieldNumOfLikes)
	}
	if m.addnum_of_comments != nil {
		fields = append(fields, review.FieldNumOfComments)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReviewMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case review.FieldRank:
		return m.AddedRank()
	case review.FieldNumOfLikes:
		return m.AddedNumOfLikes()
	case review.FieldNumOfComments:
		return m.AddedNumOfComments()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReviewMutation) AddField(name string, value ent.Value) error {
	switch name {
	case review.FieldRank:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRank(v)
		return nil
	case review.FieldNumOfLikes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumOfLikes(v)
		return nil
	case review.FieldNumOfComments:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumOfComments(v)
		return nil
	}
	return fmt.Errorf("unknown Review numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReviewMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReviewMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReviewMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Review nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReviewMutation) ResetField(name string) error {
	switch name {
	case review.FieldTopic:
		m.ResetTopic()
		return nil
	case review.FieldText:
		m.ResetText()
		return nil
	case review.FieldRank:
		m.ResetRank()
		return nil
	case review.FieldNumOfLikes:
		m.ResetNumOfLikes()
		return nil
	case review.FieldNumOfComments:
		m.ResetNumOfComments()
		return nil
	}
	return fmt.Errorf("unknown Review field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReviewMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.movie != nil {
		edges = append(edges, review.EdgeMovie)
	}
	if m.user != nil {
		edges = append(edges, review.EdgeUser)
	}
	if m.comments != nil {
		edges = append(edges, review.EdgeComments)
	}
	if m.likes != nil {
		edges = append(edges, review.EdgeLikes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReviewMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case review.EdgeMovie:
		if id := m.movie; id != nil {
			return []ent.Value{*id}
		}
	case review.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case review.EdgeComments:
		ids := make([]ent.Value, 0, len(m.comments))
		for id := range m.comments {
			ids = append(ids, id)
		}
		return ids
	case review.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.likes))
		for id := range m.likes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReviewMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedcomments != nil {
		edges = append(edges, review.EdgeComments)
	}
	if m.removedlikes != nil {
		edges = append(edges, review.EdgeLikes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReviewMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case review.EdgeComments:
		ids := make([]ent.Value, 0, len(m.removedcomments))
		for id := range m.removedcomments {
			ids = append(ids, id)
		}
		return ids
	case review.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.removedlikes))
		for id := range m.removedlikes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReviewMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedmovie {
		edges = append(edges, review.EdgeMovie)
	}
	if m.cleareduser {
		edges = append(edges, review.EdgeUser)
	}
	if m.clearedcomments {
		edges = append(edges, review.EdgeComments)
	}
	if m.clearedlikes {
		edges = append(edges, review.EdgeLikes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReviewMutation) EdgeCleared(name string) bool {
	switch name {
	case review.EdgeMovie:
		return m.clearedmovie
	case review.EdgeUser:
		return m.cleareduser
	case review.EdgeComments:
		return m.clearedcomments
	case review.EdgeLikes:
		return m.clearedlikes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReviewMutation) ClearEdge(name string) error {
	switch name {
	case review.EdgeMovie:
		m.ClearMovie()
		return nil
	case review.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Review unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReviewMutation) ResetEdge(name string) error {
	switch name {
	case review.EdgeMovie:
		m.ResetMovie()
		return nil
	case review.EdgeUser:
		m.ResetUser()
		return nil
	case review.EdgeComments:
		m.ResetComments()
		return nil
	case review.EdgeLikes:
		m.ResetLikes()
		return nil
	}
	return fmt.Errorf("unknown Review edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op               Op
	typ              string
	id               *int
	firstname        *string
	lastname         *string
	nickname         *string
	description      *string
	password         *string
	email            *string
	birthDay         *string
	profile          *string
	country          *string
	gender           *string
	signup_at        *string
	clearedFields    map[string]struct{}
	reviews          map[int]struct{}
	removedreviews   map[int]struct{}
	clearedreviews   bool
	comments         map[int]struct{}
	removedcomments  map[int]struct{}
	clearedcomments  bool
	likes            map[int]struct{}
	removedlikes     map[int]struct{}
	clearedlikes     bool
	movies           map[int]struct{}
	removedmovies    map[int]struct{}
	clearedmovies    bool
	directors        map[int]struct{}
	removeddirectors map[int]struct{}
	cleareddirectors bool
	done             bool
	oldValue         func(context.Context) (*User, error)
	predicates       []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstname sets the "firstname" field.
func (m *UserMutation) SetFirstname(s string) {
	m.firstname = &s
}

// Firstname returns the value of the "firstname" field in the mutation.
func (m *UserMutation) Firstname() (r string, exists bool) {
	v := m.firstname
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstname returns the old "firstname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstname: %w", err)
	}
	return oldValue.Firstname, nil
}

// ResetFirstname resets all changes to the "firstname" field.
func (m *UserMutation) ResetFirstname() {
	m.firstname = nil
}

// SetLastname sets the "lastname" field.
func (m *UserMutation) SetLastname(s string) {
	m.lastname = &s
}

// Lastname returns the value of the "lastname" field in the mutation.
func (m *UserMutation) Lastname() (r string, exists bool) {
	v := m.lastname
	if v == nil {
		return
	}
	return *v, true
}

// OldLastname returns the old "lastname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastname: %w", err)
	}
	return oldValue.Lastname, nil
}

// ResetLastname resets all changes to the "lastname" field.
func (m *UserMutation) ResetLastname() {
	m.lastname = nil
}

// SetNickname sets the "nickname" field.
func (m *UserMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *UserMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *UserMutation) ResetNickname() {
	m.nickname = nil
}

// SetDescription sets the "description" field.
func (m *UserMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *UserMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *UserMutation) ResetDescription() {
	m.description = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetBirthDay sets the "birthDay" field.
func (m *UserMutation) SetBirthDay(s string) {
	m.birthDay = &s
}

// BirthDay returns the value of the "birthDay" field in the mutation.
func (m *UserMutation) BirthDay() (r string, exists bool) {
	v := m.birthDay
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthDay returns the old "birthDay" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBirthDay(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthDay: %w", err)
	}
	return oldValue.BirthDay, nil
}

// ResetBirthDay resets all changes to the "birthDay" field.
func (m *UserMutation) ResetBirthDay() {
	m.birthDay = nil
}

// SetProfile sets the "profile" field.
func (m *UserMutation) SetProfile(s string) {
	m.profile = &s
}

// Profile returns the value of the "profile" field in the mutation.
func (m *UserMutation) Profile() (r string, exists bool) {
	v := m.profile
	if v == nil {
		return
	}
	return *v, true
}

// OldProfile returns the old "profile" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldProfile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfile: %w", err)
	}
	return oldValue.Profile, nil
}

// ResetProfile resets all changes to the "profile" field.
func (m *UserMutation) ResetProfile() {
	m.profile = nil
}

// SetCountry sets the "country" field.
func (m *UserMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *UserMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *UserMutation) ResetCountry() {
	m.country = nil
}

// SetGender sets the "gender" field.
func (m *UserMutation) SetGender(s string) {
	m.gender = &s
}

// Gender returns the value of the "gender" field in the mutation.
func (m *UserMutation) Gender() (r string, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *UserMutation) ResetGender() {
	m.gender = nil
}

// SetSignupAt sets the "signup_at" field.
func (m *UserMutation) SetSignupAt(s string) {
	m.signup_at = &s
}

// SignupAt returns the value of the "signup_at" field in the mutation.
func (m *UserMutation) SignupAt() (r string, exists bool) {
	v := m.signup_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSignupAt returns the old "signup_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSignupAt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSignupAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSignupAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignupAt: %w", err)
	}
	return oldValue.SignupAt, nil
}

// ResetSignupAt resets all changes to the "signup_at" field.
func (m *UserMutation) ResetSignupAt() {
	m.signup_at = nil
}

// AddReviewIDs adds the "reviews" edge to the Review entity by ids.
func (m *UserMutation) AddReviewIDs(ids ...int) {
	if m.reviews == nil {
		m.reviews = make(map[int]struct{})
	}
	for i := range ids {
		m.reviews[ids[i]] = struct{}{}
	}
}

// ClearReviews clears the "reviews" edge to the Review entity.
func (m *UserMutation) ClearReviews() {
	m.clearedreviews = true
}

// ReviewsCleared reports if the "reviews" edge to the Review entity was cleared.
func (m *UserMutation) ReviewsCleared() bool {
	return m.clearedreviews
}

// RemoveReviewIDs removes the "reviews" edge to the Review entity by IDs.
func (m *UserMutation) RemoveReviewIDs(ids ...int) {
	if m.removedreviews == nil {
		m.removedreviews = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.reviews, ids[i])
		m.removedreviews[ids[i]] = struct{}{}
	}
}

// RemovedReviews returns the removed IDs of the "reviews" edge to the Review entity.
func (m *UserMutation) RemovedReviewsIDs() (ids []int) {
	for id := range m.removedreviews {
		ids = append(ids, id)
	}
	return
}

// ReviewsIDs returns the "reviews" edge IDs in the mutation.
func (m *UserMutation) ReviewsIDs() (ids []int) {
	for id := range m.reviews {
		ids = append(ids, id)
	}
	return
}

// ResetReviews resets all changes to the "reviews" edge.
func (m *UserMutation) ResetReviews() {
	m.reviews = nil
	m.clearedreviews = false
	m.removedreviews = nil
}

// AddCommentIDs adds the "comments" edge to the Comment entity by ids.
func (m *UserMutation) AddCommentIDs(ids ...int) {
	if m.comments == nil {
		m.comments = make(map[int]struct{})
	}
	for i := range ids {
		m.comments[ids[i]] = struct{}{}
	}
}

// ClearComments clears the "comments" edge to the Comment entity.
func (m *UserMutation) ClearComments() {
	m.clearedcomments = true
}

// CommentsCleared reports if the "comments" edge to the Comment entity was cleared.
func (m *UserMutation) CommentsCleared() bool {
	return m.clearedcomments
}

// RemoveCommentIDs removes the "comments" edge to the Comment entity by IDs.
func (m *UserMutation) RemoveCommentIDs(ids ...int) {
	if m.removedcomments == nil {
		m.removedcomments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.comments, ids[i])
		m.removedcomments[ids[i]] = struct{}{}
	}
}

// RemovedComments returns the removed IDs of the "comments" edge to the Comment entity.
func (m *UserMutation) RemovedCommentsIDs() (ids []int) {
	for id := range m.removedcomments {
		ids = append(ids, id)
	}
	return
}

// CommentsIDs returns the "comments" edge IDs in the mutation.
func (m *UserMutation) CommentsIDs() (ids []int) {
	for id := range m.comments {
		ids = append(ids, id)
	}
	return
}

// ResetComments resets all changes to the "comments" edge.
func (m *UserMutation) ResetComments() {
	m.comments = nil
	m.clearedcomments = false
	m.removedcomments = nil
}

// AddLikeIDs adds the "likes" edge to the Like entity by ids.
func (m *UserMutation) AddLikeIDs(ids ...int) {
	if m.likes == nil {
		m.likes = make(map[int]struct{})
	}
	for i := range ids {
		m.likes[ids[i]] = struct{}{}
	}
}

// ClearLikes clears the "likes" edge to the Like entity.
func (m *UserMutation) ClearLikes() {
	m.clearedlikes = true
}

// LikesCleared reports if the "likes" edge to the Like entity was cleared.
func (m *UserMutation) LikesCleared() bool {
	return m.clearedlikes
}

// RemoveLikeIDs removes the "likes" edge to the Like entity by IDs.
func (m *UserMutation) RemoveLikeIDs(ids ...int) {
	if m.removedlikes == nil {
		m.removedlikes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.likes, ids[i])
		m.removedlikes[ids[i]] = struct{}{}
	}
}

// RemovedLikes returns the removed IDs of the "likes" edge to the Like entity.
func (m *UserMutation) RemovedLikesIDs() (ids []int) {
	for id := range m.removedlikes {
		ids = append(ids, id)
	}
	return
}

// LikesIDs returns the "likes" edge IDs in the mutation.
func (m *UserMutation) LikesIDs() (ids []int) {
	for id := range m.likes {
		ids = append(ids, id)
	}
	return
}

// ResetLikes resets all changes to the "likes" edge.
func (m *UserMutation) ResetLikes() {
	m.likes = nil
	m.clearedlikes = false
	m.removedlikes = nil
}

// AddMovieIDs adds the "movies" edge to the Movie entity by ids.
func (m *UserMutation) AddMovieIDs(ids ...int) {
	if m.movies == nil {
		m.movies = make(map[int]struct{})
	}
	for i := range ids {
		m.movies[ids[i]] = struct{}{}
	}
}

// ClearMovies clears the "movies" edge to the Movie entity.
func (m *UserMutation) ClearMovies() {
	m.clearedmovies = true
}

// MoviesCleared reports if the "movies" edge to the Movie entity was cleared.
func (m *UserMutation) MoviesCleared() bool {
	return m.clearedmovies
}

// RemoveMovieIDs removes the "movies" edge to the Movie entity by IDs.
func (m *UserMutation) RemoveMovieIDs(ids ...int) {
	if m.removedmovies == nil {
		m.removedmovies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.movies, ids[i])
		m.removedmovies[ids[i]] = struct{}{}
	}
}

// RemovedMovies returns the removed IDs of the "movies" edge to the Movie entity.
func (m *UserMutation) RemovedMoviesIDs() (ids []int) {
	for id := range m.removedmovies {
		ids = append(ids, id)
	}
	return
}

// MoviesIDs returns the "movies" edge IDs in the mutation.
func (m *UserMutation) MoviesIDs() (ids []int) {
	for id := range m.movies {
		ids = append(ids, id)
	}
	return
}

// ResetMovies resets all changes to the "movies" edge.
func (m *UserMutation) ResetMovies() {
	m.movies = nil
	m.clearedmovies = false
	m.removedmovies = nil
}

// AddDirectorIDs adds the "directors" edge to the Director entity by ids.
func (m *UserMutation) AddDirectorIDs(ids ...int) {
	if m.directors == nil {
		m.directors = make(map[int]struct{})
	}
	for i := range ids {
		m.directors[ids[i]] = struct{}{}
	}
}

// ClearDirectors clears the "directors" edge to the Director entity.
func (m *UserMutation) ClearDirectors() {
	m.cleareddirectors = true
}

// DirectorsCleared reports if the "directors" edge to the Director entity was cleared.
func (m *UserMutation) DirectorsCleared() bool {
	return m.cleareddirectors
}

// RemoveDirectorIDs removes the "directors" edge to the Director entity by IDs.
func (m *UserMutation) RemoveDirectorIDs(ids ...int) {
	if m.removeddirectors == nil {
		m.removeddirectors = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.directors, ids[i])
		m.removeddirectors[ids[i]] = struct{}{}
	}
}

// RemovedDirectors returns the removed IDs of the "directors" edge to the Director entity.
func (m *UserMutation) RemovedDirectorsIDs() (ids []int) {
	for id := range m.removeddirectors {
		ids = append(ids, id)
	}
	return
}

// DirectorsIDs returns the "directors" edge IDs in the mutation.
func (m *UserMutation) DirectorsIDs() (ids []int) {
	for id := range m.directors {
		ids = append(ids, id)
	}
	return
}

// ResetDirectors resets all changes to the "directors" edge.
func (m *UserMutation) ResetDirectors() {
	m.directors = nil
	m.cleareddirectors = false
	m.removeddirectors = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.firstname != nil {
		fields = append(fields, user.FieldFirstname)
	}
	if m.lastname != nil {
		fields = append(fields, user.FieldLastname)
	}
	if m.nickname != nil {
		fields = append(fields, user.FieldNickname)
	}
	if m.description != nil {
		fields = append(fields, user.FieldDescription)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.birthDay != nil {
		fields = append(fields, user.FieldBirthDay)
	}
	if m.profile != nil {
		fields = append(fields, user.FieldProfile)
	}
	if m.country != nil {
		fields = append(fields, user.FieldCountry)
	}
	if m.gender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.signup_at != nil {
		fields = append(fields, user.FieldSignupAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFirstname:
		return m.Firstname()
	case user.FieldLastname:
		return m.Lastname()
	case user.FieldNickname:
		return m.Nickname()
	case user.FieldDescription:
		return m.Description()
	case user.FieldPassword:
		return m.Password()
	case user.FieldEmail:
		return m.Email()
	case user.FieldBirthDay:
		return m.BirthDay()
	case user.FieldProfile:
		return m.Profile()
	case user.FieldCountry:
		return m.Country()
	case user.FieldGender:
		return m.Gender()
	case user.FieldSignupAt:
		return m.SignupAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldFirstname:
		return m.OldFirstname(ctx)
	case user.FieldLastname:
		return m.OldLastname(ctx)
	case user.FieldNickname:
		return m.OldNickname(ctx)
	case user.FieldDescription:
		return m.OldDescription(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldBirthDay:
		return m.OldBirthDay(ctx)
	case user.FieldProfile:
		return m.OldProfile(ctx)
	case user.FieldCountry:
		return m.OldCountry(ctx)
	case user.FieldGender:
		return m.OldGender(ctx)
	case user.FieldSignupAt:
		return m.OldSignupAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldFirstname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstname(v)
		return nil
	case user.FieldLastname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastname(v)
		return nil
	case user.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case user.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldBirthDay:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthDay(v)
		return nil
	case user.FieldProfile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfile(v)
		return nil
	case user.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case user.FieldGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case user.FieldSignupAt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignupAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldFirstname:
		m.ResetFirstname()
		return nil
	case user.FieldLastname:
		m.ResetLastname()
		return nil
	case user.FieldNickname:
		m.ResetNickname()
		return nil
	case user.FieldDescription:
		m.ResetDescription()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldBirthDay:
		m.ResetBirthDay()
		return nil
	case user.FieldProfile:
		m.ResetProfile()
		return nil
	case user.FieldCountry:
		m.ResetCountry()
		return nil
	case user.FieldGender:
		m.ResetGender()
		return nil
	case user.FieldSignupAt:
		m.ResetSignupAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.reviews != nil {
		edges = append(edges, user.EdgeReviews)
	}
	if m.comments != nil {
		edges = append(edges, user.EdgeComments)
	}
	if m.likes != nil {
		edges = append(edges, user.EdgeLikes)
	}
	if m.movies != nil {
		edges = append(edges, user.EdgeMovies)
	}
	if m.directors != nil {
		edges = append(edges, user.EdgeDirectors)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeReviews:
		ids := make([]ent.Value, 0, len(m.reviews))
		for id := range m.reviews {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeComments:
		ids := make([]ent.Value, 0, len(m.comments))
		for id := range m.comments {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.likes))
		for id := range m.likes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMovies:
		ids := make([]ent.Value, 0, len(m.movies))
		for id := range m.movies {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDirectors:
		ids := make([]ent.Value, 0, len(m.directors))
		for id := range m.directors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedreviews != nil {
		edges = append(edges, user.EdgeReviews)
	}
	if m.removedcomments != nil {
		edges = append(edges, user.EdgeComments)
	}
	if m.removedlikes != nil {
		edges = append(edges, user.EdgeLikes)
	}
	if m.removedmovies != nil {
		edges = append(edges, user.EdgeMovies)
	}
	if m.removeddirectors != nil {
		edges = append(edges, user.EdgeDirectors)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeReviews:
		ids := make([]ent.Value, 0, len(m.removedreviews))
		for id := range m.removedreviews {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeComments:
		ids := make([]ent.Value, 0, len(m.removedcomments))
		for id := range m.removedcomments {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.removedlikes))
		for id := range m.removedlikes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMovies:
		ids := make([]ent.Value, 0, len(m.removedmovies))
		for id := range m.removedmovies {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDirectors:
		ids := make([]ent.Value, 0, len(m.removeddirectors))
		for id := range m.removeddirectors {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedreviews {
		edges = append(edges, user.EdgeReviews)
	}
	if m.clearedcomments {
		edges = append(edges, user.EdgeComments)
	}
	if m.clearedlikes {
		edges = append(edges, user.EdgeLikes)
	}
	if m.clearedmovies {
		edges = append(edges, user.EdgeMovies)
	}
	if m.cleareddirectors {
		edges = append(edges, user.EdgeDirectors)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeReviews:
		return m.clearedreviews
	case user.EdgeComments:
		return m.clearedcomments
	case user.EdgeLikes:
		return m.clearedlikes
	case user.EdgeMovies:
		return m.clearedmovies
	case user.EdgeDirectors:
		return m.cleareddirectors
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeReviews:
		m.ResetReviews()
		return nil
	case user.EdgeComments:
		m.ResetComments()
		return nil
	case user.EdgeLikes:
		m.ResetLikes()
		return nil
	case user.EdgeMovies:
		m.ResetMovies()
		return nil
	case user.EdgeDirectors:
		m.ResetDirectors()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
