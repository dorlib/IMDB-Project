// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"imdbv2/ent/achievement"
	"imdbv2/ent/actor"
	"imdbv2/ent/comment"
	"imdbv2/ent/dashboard"
	"imdbv2/ent/director"
	"imdbv2/ent/favorite"
	"imdbv2/ent/like"
	"imdbv2/ent/movie"
	"imdbv2/ent/review"
	"imdbv2/ent/user"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// AchievementEdge is the edge representation of Achievement.
type AchievementEdge struct {
	Node   *Achievement `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// AchievementConnection is the connection containing edges to Achievement.
type AchievementConnection struct {
	Edges      []*AchievementEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

// AchievementPaginateOption enables pagination customization.
type AchievementPaginateOption func(*achievementPager) error

// WithAchievementOrder configures pagination ordering.
func WithAchievementOrder(order *AchievementOrder) AchievementPaginateOption {
	if order == nil {
		order = DefaultAchievementOrder
	}
	o := *order
	return func(pager *achievementPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAchievementOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAchievementFilter configures pagination filter.
func WithAchievementFilter(filter func(*AchievementQuery) (*AchievementQuery, error)) AchievementPaginateOption {
	return func(pager *achievementPager) error {
		if filter == nil {
			return errors.New("AchievementQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type achievementPager struct {
	order  *AchievementOrder
	filter func(*AchievementQuery) (*AchievementQuery, error)
}

func newAchievementPager(opts []AchievementPaginateOption) (*achievementPager, error) {
	pager := &achievementPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAchievementOrder
	}
	return pager, nil
}

func (p *achievementPager) applyFilter(query *AchievementQuery) (*AchievementQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *achievementPager) toCursor(a *Achievement) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *achievementPager) applyCursors(query *AchievementQuery, after, before *Cursor) *AchievementQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAchievementOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *achievementPager) applyOrder(query *AchievementQuery, reverse bool) *AchievementQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAchievementOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAchievementOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Achievement.
func (a *AchievementQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AchievementPaginateOption,
) (*AchievementConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAchievementPager(opts)
	if err != nil {
		return nil, err
	}

	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}

	conn := &AchievementConnection{Edges: []*AchievementEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := a.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := a.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	a = pager.applyCursors(a, after, before)
	a = pager.applyOrder(a, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		a = a.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		a = a.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := a.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Achievement
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Achievement {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Achievement {
			return nodes[i]
		}
	}

	conn.Edges = make([]*AchievementEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &AchievementEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// AchievementOrderField defines the ordering field of Achievement.
type AchievementOrderField struct {
	field    string
	toCursor func(*Achievement) Cursor
}

// AchievementOrder defines the ordering of Achievement.
type AchievementOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *AchievementOrderField `json:"field"`
}

// DefaultAchievementOrder is the default ordering of Achievement.
var DefaultAchievementOrder = &AchievementOrder{
	Direction: OrderDirectionAsc,
	Field: &AchievementOrderField{
		field: achievement.FieldID,
		toCursor: func(a *Achievement) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Achievement into AchievementEdge.
func (a *Achievement) ToEdge(order *AchievementOrder) *AchievementEdge {
	if order == nil {
		order = DefaultAchievementOrder
	}
	return &AchievementEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// ActorEdge is the edge representation of Actor.
type ActorEdge struct {
	Node   *Actor `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// ActorConnection is the connection containing edges to Actor.
type ActorConnection struct {
	Edges      []*ActorEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

// ActorPaginateOption enables pagination customization.
type ActorPaginateOption func(*actorPager) error

// WithActorOrder configures pagination ordering.
func WithActorOrder(order *ActorOrder) ActorPaginateOption {
	if order == nil {
		order = DefaultActorOrder
	}
	o := *order
	return func(pager *actorPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultActorOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithActorFilter configures pagination filter.
func WithActorFilter(filter func(*ActorQuery) (*ActorQuery, error)) ActorPaginateOption {
	return func(pager *actorPager) error {
		if filter == nil {
			return errors.New("ActorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type actorPager struct {
	order  *ActorOrder
	filter func(*ActorQuery) (*ActorQuery, error)
}

func newActorPager(opts []ActorPaginateOption) (*actorPager, error) {
	pager := &actorPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultActorOrder
	}
	return pager, nil
}

func (p *actorPager) applyFilter(query *ActorQuery) (*ActorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *actorPager) toCursor(a *Actor) Cursor {
	return p.order.Field.toCursor(a)
}

func (p *actorPager) applyCursors(query *ActorQuery, after, before *Cursor) *ActorQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultActorOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *actorPager) applyOrder(query *ActorQuery, reverse bool) *ActorQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultActorOrder.Field {
		query = query.Order(direction.orderFunc(DefaultActorOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Actor.
func (a *ActorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ActorPaginateOption,
) (*ActorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newActorPager(opts)
	if err != nil {
		return nil, err
	}

	if a, err = pager.applyFilter(a); err != nil {
		return nil, err
	}

	conn := &ActorConnection{Edges: []*ActorEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := a.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := a.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	a = pager.applyCursors(a, after, before)
	a = pager.applyOrder(a, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		a = a.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		a = a.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := a.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Actor
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Actor {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Actor {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ActorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ActorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ActorOrderField defines the ordering field of Actor.
type ActorOrderField struct {
	field    string
	toCursor func(*Actor) Cursor
}

// ActorOrder defines the ordering of Actor.
type ActorOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *ActorOrderField `json:"field"`
}

// DefaultActorOrder is the default ordering of Actor.
var DefaultActorOrder = &ActorOrder{
	Direction: OrderDirectionAsc,
	Field: &ActorOrderField{
		field: actor.FieldID,
		toCursor: func(a *Actor) Cursor {
			return Cursor{ID: a.ID}
		},
	},
}

// ToEdge converts Actor into ActorEdge.
func (a *Actor) ToEdge(order *ActorOrder) *ActorEdge {
	if order == nil {
		order = DefaultActorOrder
	}
	return &ActorEdge{
		Node:   a,
		Cursor: order.Field.toCursor(a),
	}
}

// CommentEdge is the edge representation of Comment.
type CommentEdge struct {
	Node   *Comment `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// CommentConnection is the connection containing edges to Comment.
type CommentConnection struct {
	Edges      []*CommentEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// CommentPaginateOption enables pagination customization.
type CommentPaginateOption func(*commentPager) error

// WithCommentOrder configures pagination ordering.
func WithCommentOrder(order *CommentOrder) CommentPaginateOption {
	if order == nil {
		order = DefaultCommentOrder
	}
	o := *order
	return func(pager *commentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCommentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCommentFilter configures pagination filter.
func WithCommentFilter(filter func(*CommentQuery) (*CommentQuery, error)) CommentPaginateOption {
	return func(pager *commentPager) error {
		if filter == nil {
			return errors.New("CommentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type commentPager struct {
	order  *CommentOrder
	filter func(*CommentQuery) (*CommentQuery, error)
}

func newCommentPager(opts []CommentPaginateOption) (*commentPager, error) {
	pager := &commentPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCommentOrder
	}
	return pager, nil
}

func (p *commentPager) applyFilter(query *CommentQuery) (*CommentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *commentPager) toCursor(c *Comment) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *commentPager) applyCursors(query *CommentQuery, after, before *Cursor) *CommentQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultCommentOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *commentPager) applyOrder(query *CommentQuery, reverse bool) *CommentQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultCommentOrder.Field {
		query = query.Order(direction.orderFunc(DefaultCommentOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Comment.
func (c *CommentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CommentPaginateOption,
) (*CommentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCommentPager(opts)
	if err != nil {
		return nil, err
	}

	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}

	conn := &CommentConnection{Edges: []*CommentEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := c.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := c.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		c = c.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := c.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Comment
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Comment {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Comment {
			return nodes[i]
		}
	}

	conn.Edges = make([]*CommentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &CommentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// CommentOrderField defines the ordering field of Comment.
type CommentOrderField struct {
	field    string
	toCursor func(*Comment) Cursor
}

// CommentOrder defines the ordering of Comment.
type CommentOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *CommentOrderField `json:"field"`
}

// DefaultCommentOrder is the default ordering of Comment.
var DefaultCommentOrder = &CommentOrder{
	Direction: OrderDirectionAsc,
	Field: &CommentOrderField{
		field: comment.FieldID,
		toCursor: func(c *Comment) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Comment into CommentEdge.
func (c *Comment) ToEdge(order *CommentOrder) *CommentEdge {
	if order == nil {
		order = DefaultCommentOrder
	}
	return &CommentEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// DashboardEdge is the edge representation of Dashboard.
type DashboardEdge struct {
	Node   *Dashboard `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// DashboardConnection is the connection containing edges to Dashboard.
type DashboardConnection struct {
	Edges      []*DashboardEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

// DashboardPaginateOption enables pagination customization.
type DashboardPaginateOption func(*dashboardPager) error

// WithDashboardOrder configures pagination ordering.
func WithDashboardOrder(order *DashboardOrder) DashboardPaginateOption {
	if order == nil {
		order = DefaultDashboardOrder
	}
	o := *order
	return func(pager *dashboardPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDashboardOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDashboardFilter configures pagination filter.
func WithDashboardFilter(filter func(*DashboardQuery) (*DashboardQuery, error)) DashboardPaginateOption {
	return func(pager *dashboardPager) error {
		if filter == nil {
			return errors.New("DashboardQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type dashboardPager struct {
	order  *DashboardOrder
	filter func(*DashboardQuery) (*DashboardQuery, error)
}

func newDashboardPager(opts []DashboardPaginateOption) (*dashboardPager, error) {
	pager := &dashboardPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDashboardOrder
	}
	return pager, nil
}

func (p *dashboardPager) applyFilter(query *DashboardQuery) (*DashboardQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *dashboardPager) toCursor(d *Dashboard) Cursor {
	return p.order.Field.toCursor(d)
}

func (p *dashboardPager) applyCursors(query *DashboardQuery, after, before *Cursor) *DashboardQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultDashboardOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *dashboardPager) applyOrder(query *DashboardQuery, reverse bool) *DashboardQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultDashboardOrder.Field {
		query = query.Order(direction.orderFunc(DefaultDashboardOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Dashboard.
func (d *DashboardQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DashboardPaginateOption,
) (*DashboardConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDashboardPager(opts)
	if err != nil {
		return nil, err
	}

	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}

	conn := &DashboardConnection{Edges: []*DashboardEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := d.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := d.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	d = pager.applyCursors(d, after, before)
	d = pager.applyOrder(d, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		d = d.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		d = d.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := d.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Dashboard
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Dashboard {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Dashboard {
			return nodes[i]
		}
	}

	conn.Edges = make([]*DashboardEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &DashboardEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// DashboardOrderField defines the ordering field of Dashboard.
type DashboardOrderField struct {
	field    string
	toCursor func(*Dashboard) Cursor
}

// DashboardOrder defines the ordering of Dashboard.
type DashboardOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *DashboardOrderField `json:"field"`
}

// DefaultDashboardOrder is the default ordering of Dashboard.
var DefaultDashboardOrder = &DashboardOrder{
	Direction: OrderDirectionAsc,
	Field: &DashboardOrderField{
		field: dashboard.FieldID,
		toCursor: func(d *Dashboard) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts Dashboard into DashboardEdge.
func (d *Dashboard) ToEdge(order *DashboardOrder) *DashboardEdge {
	if order == nil {
		order = DefaultDashboardOrder
	}
	return &DashboardEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// DirectorEdge is the edge representation of Director.
type DirectorEdge struct {
	Node   *Director `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// DirectorConnection is the connection containing edges to Director.
type DirectorConnection struct {
	Edges      []*DirectorEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// DirectorPaginateOption enables pagination customization.
type DirectorPaginateOption func(*directorPager) error

// WithDirectorOrder configures pagination ordering.
func WithDirectorOrder(order *DirectorOrder) DirectorPaginateOption {
	if order == nil {
		order = DefaultDirectorOrder
	}
	o := *order
	return func(pager *directorPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDirectorOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDirectorFilter configures pagination filter.
func WithDirectorFilter(filter func(*DirectorQuery) (*DirectorQuery, error)) DirectorPaginateOption {
	return func(pager *directorPager) error {
		if filter == nil {
			return errors.New("DirectorQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type directorPager struct {
	order  *DirectorOrder
	filter func(*DirectorQuery) (*DirectorQuery, error)
}

func newDirectorPager(opts []DirectorPaginateOption) (*directorPager, error) {
	pager := &directorPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDirectorOrder
	}
	return pager, nil
}

func (p *directorPager) applyFilter(query *DirectorQuery) (*DirectorQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *directorPager) toCursor(d *Director) Cursor {
	return p.order.Field.toCursor(d)
}

func (p *directorPager) applyCursors(query *DirectorQuery, after, before *Cursor) *DirectorQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultDirectorOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *directorPager) applyOrder(query *DirectorQuery, reverse bool) *DirectorQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultDirectorOrder.Field {
		query = query.Order(direction.orderFunc(DefaultDirectorOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Director.
func (d *DirectorQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DirectorPaginateOption,
) (*DirectorConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDirectorPager(opts)
	if err != nil {
		return nil, err
	}

	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}

	conn := &DirectorConnection{Edges: []*DirectorEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := d.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := d.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	d = pager.applyCursors(d, after, before)
	d = pager.applyOrder(d, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		d = d.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		d = d.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := d.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Director
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Director {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Director {
			return nodes[i]
		}
	}

	conn.Edges = make([]*DirectorEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &DirectorEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// DirectorOrderFieldName orders Director by name.
	DirectorOrderFieldName = &DirectorOrderField{
		field: director.FieldName,
		toCursor: func(d *Director) Cursor {
			return Cursor{
				ID:    d.ID,
				Value: d.Name,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f DirectorOrderField) String() string {
	var str string
	switch f.field {
	case director.FieldName:
		str = "DIRECTOR_NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f DirectorOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *DirectorOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("DirectorOrderField %T must be a string", v)
	}
	switch str {
	case "DIRECTOR_NAME":
		*f = *DirectorOrderFieldName
	default:
		return fmt.Errorf("%s is not a valid DirectorOrderField", str)
	}
	return nil
}

// DirectorOrderField defines the ordering field of Director.
type DirectorOrderField struct {
	field    string
	toCursor func(*Director) Cursor
}

// DirectorOrder defines the ordering of Director.
type DirectorOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *DirectorOrderField `json:"field"`
}

// DefaultDirectorOrder is the default ordering of Director.
var DefaultDirectorOrder = &DirectorOrder{
	Direction: OrderDirectionAsc,
	Field: &DirectorOrderField{
		field: director.FieldID,
		toCursor: func(d *Director) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts Director into DirectorEdge.
func (d *Director) ToEdge(order *DirectorOrder) *DirectorEdge {
	if order == nil {
		order = DefaultDirectorOrder
	}
	return &DirectorEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// FavoriteEdge is the edge representation of Favorite.
type FavoriteEdge struct {
	Node   *Favorite `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// FavoriteConnection is the connection containing edges to Favorite.
type FavoriteConnection struct {
	Edges      []*FavoriteEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// FavoritePaginateOption enables pagination customization.
type FavoritePaginateOption func(*favoritePager) error

// WithFavoriteOrder configures pagination ordering.
func WithFavoriteOrder(order *FavoriteOrder) FavoritePaginateOption {
	if order == nil {
		order = DefaultFavoriteOrder
	}
	o := *order
	return func(pager *favoritePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFavoriteOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFavoriteFilter configures pagination filter.
func WithFavoriteFilter(filter func(*FavoriteQuery) (*FavoriteQuery, error)) FavoritePaginateOption {
	return func(pager *favoritePager) error {
		if filter == nil {
			return errors.New("FavoriteQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type favoritePager struct {
	order  *FavoriteOrder
	filter func(*FavoriteQuery) (*FavoriteQuery, error)
}

func newFavoritePager(opts []FavoritePaginateOption) (*favoritePager, error) {
	pager := &favoritePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFavoriteOrder
	}
	return pager, nil
}

func (p *favoritePager) applyFilter(query *FavoriteQuery) (*FavoriteQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *favoritePager) toCursor(f *Favorite) Cursor {
	return p.order.Field.toCursor(f)
}

func (p *favoritePager) applyCursors(query *FavoriteQuery, after, before *Cursor) *FavoriteQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultFavoriteOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *favoritePager) applyOrder(query *FavoriteQuery, reverse bool) *FavoriteQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultFavoriteOrder.Field {
		query = query.Order(direction.orderFunc(DefaultFavoriteOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Favorite.
func (f *FavoriteQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FavoritePaginateOption,
) (*FavoriteConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFavoritePager(opts)
	if err != nil {
		return nil, err
	}

	if f, err = pager.applyFilter(f); err != nil {
		return nil, err
	}

	conn := &FavoriteConnection{Edges: []*FavoriteEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := f.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := f.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	f = pager.applyCursors(f, after, before)
	f = pager.applyOrder(f, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		f = f.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		f = f.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := f.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Favorite
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Favorite {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Favorite {
			return nodes[i]
		}
	}

	conn.Edges = make([]*FavoriteEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &FavoriteEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// FavoriteOrderFieldMovieTitle orders Favorite by movie_title.
	FavoriteOrderFieldMovieTitle = &FavoriteOrderField{
		field: favorite.FieldMovieTitle,
		toCursor: func(f *Favorite) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.MovieTitle,
			}
		},
	}
	// FavoriteOrderFieldMovieID orders Favorite by movie_id.
	FavoriteOrderFieldMovieID = &FavoriteOrderField{
		field: favorite.FieldMovieID,
		toCursor: func(f *Favorite) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.MovieID,
			}
		},
	}
	// FavoriteOrderFieldUserID orders Favorite by user_id.
	FavoriteOrderFieldUserID = &FavoriteOrderField{
		field: favorite.FieldUserID,
		toCursor: func(f *Favorite) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.UserID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f FavoriteOrderField) String() string {
	var str string
	switch f.field {
	case favorite.FieldMovieTitle:
		str = "MOVIE_TITLE"
	case favorite.FieldMovieID:
		str = "MOVIE_ID"
	case favorite.FieldUserID:
		str = "USER_ID"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f FavoriteOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *FavoriteOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("FavoriteOrderField %T must be a string", v)
	}
	switch str {
	case "MOVIE_TITLE":
		*f = *FavoriteOrderFieldMovieTitle
	case "MOVIE_ID":
		*f = *FavoriteOrderFieldMovieID
	case "USER_ID":
		*f = *FavoriteOrderFieldUserID
	default:
		return fmt.Errorf("%s is not a valid FavoriteOrderField", str)
	}
	return nil
}

// FavoriteOrderField defines the ordering field of Favorite.
type FavoriteOrderField struct {
	field    string
	toCursor func(*Favorite) Cursor
}

// FavoriteOrder defines the ordering of Favorite.
type FavoriteOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *FavoriteOrderField `json:"field"`
}

// DefaultFavoriteOrder is the default ordering of Favorite.
var DefaultFavoriteOrder = &FavoriteOrder{
	Direction: OrderDirectionAsc,
	Field: &FavoriteOrderField{
		field: favorite.FieldID,
		toCursor: func(f *Favorite) Cursor {
			return Cursor{ID: f.ID}
		},
	},
}

// ToEdge converts Favorite into FavoriteEdge.
func (f *Favorite) ToEdge(order *FavoriteOrder) *FavoriteEdge {
	if order == nil {
		order = DefaultFavoriteOrder
	}
	return &FavoriteEdge{
		Node:   f,
		Cursor: order.Field.toCursor(f),
	}
}

// LikeEdge is the edge representation of Like.
type LikeEdge struct {
	Node   *Like  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// LikeConnection is the connection containing edges to Like.
type LikeConnection struct {
	Edges      []*LikeEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// LikePaginateOption enables pagination customization.
type LikePaginateOption func(*likePager) error

// WithLikeOrder configures pagination ordering.
func WithLikeOrder(order *LikeOrder) LikePaginateOption {
	if order == nil {
		order = DefaultLikeOrder
	}
	o := *order
	return func(pager *likePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultLikeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithLikeFilter configures pagination filter.
func WithLikeFilter(filter func(*LikeQuery) (*LikeQuery, error)) LikePaginateOption {
	return func(pager *likePager) error {
		if filter == nil {
			return errors.New("LikeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type likePager struct {
	order  *LikeOrder
	filter func(*LikeQuery) (*LikeQuery, error)
}

func newLikePager(opts []LikePaginateOption) (*likePager, error) {
	pager := &likePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultLikeOrder
	}
	return pager, nil
}

func (p *likePager) applyFilter(query *LikeQuery) (*LikeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *likePager) toCursor(l *Like) Cursor {
	return p.order.Field.toCursor(l)
}

func (p *likePager) applyCursors(query *LikeQuery, after, before *Cursor) *LikeQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultLikeOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *likePager) applyOrder(query *LikeQuery, reverse bool) *LikeQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultLikeOrder.Field {
		query = query.Order(direction.orderFunc(DefaultLikeOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Like.
func (l *LikeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...LikePaginateOption,
) (*LikeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newLikePager(opts)
	if err != nil {
		return nil, err
	}

	if l, err = pager.applyFilter(l); err != nil {
		return nil, err
	}

	conn := &LikeConnection{Edges: []*LikeEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := l.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := l.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	l = pager.applyCursors(l, after, before)
	l = pager.applyOrder(l, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		l = l.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		l = l.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := l.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Like
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Like {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Like {
			return nodes[i]
		}
	}

	conn.Edges = make([]*LikeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &LikeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// LikeOrderField defines the ordering field of Like.
type LikeOrderField struct {
	field    string
	toCursor func(*Like) Cursor
}

// LikeOrder defines the ordering of Like.
type LikeOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *LikeOrderField `json:"field"`
}

// DefaultLikeOrder is the default ordering of Like.
var DefaultLikeOrder = &LikeOrder{
	Direction: OrderDirectionAsc,
	Field: &LikeOrderField{
		field: like.FieldID,
		toCursor: func(l *Like) Cursor {
			return Cursor{ID: l.ID}
		},
	},
}

// ToEdge converts Like into LikeEdge.
func (l *Like) ToEdge(order *LikeOrder) *LikeEdge {
	if order == nil {
		order = DefaultLikeOrder
	}
	return &LikeEdge{
		Node:   l,
		Cursor: order.Field.toCursor(l),
	}
}

// MovieEdge is the edge representation of Movie.
type MovieEdge struct {
	Node   *Movie `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// MovieConnection is the connection containing edges to Movie.
type MovieConnection struct {
	Edges      []*MovieEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

// MoviePaginateOption enables pagination customization.
type MoviePaginateOption func(*moviePager) error

// WithMovieOrder configures pagination ordering.
func WithMovieOrder(order *MovieOrder) MoviePaginateOption {
	if order == nil {
		order = DefaultMovieOrder
	}
	o := *order
	return func(pager *moviePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMovieOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMovieFilter configures pagination filter.
func WithMovieFilter(filter func(*MovieQuery) (*MovieQuery, error)) MoviePaginateOption {
	return func(pager *moviePager) error {
		if filter == nil {
			return errors.New("MovieQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type moviePager struct {
	order  *MovieOrder
	filter func(*MovieQuery) (*MovieQuery, error)
}

func newMoviePager(opts []MoviePaginateOption) (*moviePager, error) {
	pager := &moviePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMovieOrder
	}
	return pager, nil
}

func (p *moviePager) applyFilter(query *MovieQuery) (*MovieQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *moviePager) toCursor(m *Movie) Cursor {
	return p.order.Field.toCursor(m)
}

func (p *moviePager) applyCursors(query *MovieQuery, after, before *Cursor) *MovieQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultMovieOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *moviePager) applyOrder(query *MovieQuery, reverse bool) *MovieQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultMovieOrder.Field {
		query = query.Order(direction.orderFunc(DefaultMovieOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Movie.
func (m *MovieQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MoviePaginateOption,
) (*MovieConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMoviePager(opts)
	if err != nil {
		return nil, err
	}

	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}

	conn := &MovieConnection{Edges: []*MovieEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := m.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := m.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	m = pager.applyCursors(m, after, before)
	m = pager.applyOrder(m, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		m = m.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		m = m.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := m.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Movie
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Movie {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Movie {
			return nodes[i]
		}
	}

	conn.Edges = make([]*MovieEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &MovieEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// MovieOrderFieldTitle orders Movie by title.
	MovieOrderFieldTitle = &MovieOrderField{
		field: movie.FieldTitle,
		toCursor: func(m *Movie) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Title,
			}
		},
	}
	// MovieOrderFieldDescription orders Movie by description.
	MovieOrderFieldDescription = &MovieOrderField{
		field: movie.FieldDescription,
		toCursor: func(m *Movie) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Description,
			}
		},
	}
	// MovieOrderFieldRank orders Movie by rank.
	MovieOrderFieldRank = &MovieOrderField{
		field: movie.FieldRank,
		toCursor: func(m *Movie) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Rank,
			}
		},
	}
	// MovieOrderFieldGenre orders Movie by genre.
	MovieOrderFieldGenre = &MovieOrderField{
		field: movie.FieldGenre,
		toCursor: func(m *Movie) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Genre,
			}
		},
	}
	// MovieOrderFieldYear orders Movie by year.
	MovieOrderFieldYear = &MovieOrderField{
		field: movie.FieldYear,
		toCursor: func(m *Movie) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Year,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MovieOrderField) String() string {
	var str string
	switch f.field {
	case movie.FieldTitle:
		str = "MOVIE_TITLE"
	case movie.FieldDescription:
		str = "MOVIE_DESCRIPTION"
	case movie.FieldRank:
		str = "MOVIE_RANK"
	case movie.FieldGenre:
		str = "GENRE"
	case movie.FieldYear:
		str = "YEAR"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MovieOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MovieOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MovieOrderField %T must be a string", v)
	}
	switch str {
	case "MOVIE_TITLE":
		*f = *MovieOrderFieldTitle
	case "MOVIE_DESCRIPTION":
		*f = *MovieOrderFieldDescription
	case "MOVIE_RANK":
		*f = *MovieOrderFieldRank
	case "GENRE":
		*f = *MovieOrderFieldGenre
	case "YEAR":
		*f = *MovieOrderFieldYear
	default:
		return fmt.Errorf("%s is not a valid MovieOrderField", str)
	}
	return nil
}

// MovieOrderField defines the ordering field of Movie.
type MovieOrderField struct {
	field    string
	toCursor func(*Movie) Cursor
}

// MovieOrder defines the ordering of Movie.
type MovieOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *MovieOrderField `json:"field"`
}

// DefaultMovieOrder is the default ordering of Movie.
var DefaultMovieOrder = &MovieOrder{
	Direction: OrderDirectionAsc,
	Field: &MovieOrderField{
		field: movie.FieldID,
		toCursor: func(m *Movie) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Movie into MovieEdge.
func (m *Movie) ToEdge(order *MovieOrder) *MovieEdge {
	if order == nil {
		order = DefaultMovieOrder
	}
	return &MovieEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}

// ReviewEdge is the edge representation of Review.
type ReviewEdge struct {
	Node   *Review `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// ReviewConnection is the connection containing edges to Review.
type ReviewConnection struct {
	Edges      []*ReviewEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

// ReviewPaginateOption enables pagination customization.
type ReviewPaginateOption func(*reviewPager) error

// WithReviewOrder configures pagination ordering.
func WithReviewOrder(order *ReviewOrder) ReviewPaginateOption {
	if order == nil {
		order = DefaultReviewOrder
	}
	o := *order
	return func(pager *reviewPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultReviewOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithReviewFilter configures pagination filter.
func WithReviewFilter(filter func(*ReviewQuery) (*ReviewQuery, error)) ReviewPaginateOption {
	return func(pager *reviewPager) error {
		if filter == nil {
			return errors.New("ReviewQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type reviewPager struct {
	order  *ReviewOrder
	filter func(*ReviewQuery) (*ReviewQuery, error)
}

func newReviewPager(opts []ReviewPaginateOption) (*reviewPager, error) {
	pager := &reviewPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultReviewOrder
	}
	return pager, nil
}

func (p *reviewPager) applyFilter(query *ReviewQuery) (*ReviewQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *reviewPager) toCursor(r *Review) Cursor {
	return p.order.Field.toCursor(r)
}

func (p *reviewPager) applyCursors(query *ReviewQuery, after, before *Cursor) *ReviewQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultReviewOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *reviewPager) applyOrder(query *ReviewQuery, reverse bool) *ReviewQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultReviewOrder.Field {
		query = query.Order(direction.orderFunc(DefaultReviewOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Review.
func (r *ReviewQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ReviewPaginateOption,
) (*ReviewConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newReviewPager(opts)
	if err != nil {
		return nil, err
	}

	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}

	conn := &ReviewConnection{Edges: []*ReviewEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := r.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := r.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	r = pager.applyCursors(r, after, before)
	r = pager.applyOrder(r, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		r = r.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		r = r.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := r.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Review
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Review {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Review {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ReviewEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ReviewEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ReviewOrderField defines the ordering field of Review.
type ReviewOrderField struct {
	field    string
	toCursor func(*Review) Cursor
}

// ReviewOrder defines the ordering of Review.
type ReviewOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *ReviewOrderField `json:"field"`
}

// DefaultReviewOrder is the default ordering of Review.
var DefaultReviewOrder = &ReviewOrder{
	Direction: OrderDirectionAsc,
	Field: &ReviewOrderField{
		field: review.FieldID,
		toCursor: func(r *Review) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Review into ReviewEdge.
func (r *Review) ToEdge(order *ReviewOrder) *ReviewEdge {
	if order == nil {
		order = DefaultReviewOrder
	}
	return &ReviewEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}

	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}

	conn := &UserConnection{Edges: []*UserEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := u.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := u.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		u = u.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := u.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}

	conn.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// UserOrderFieldNickname orders User by nickname.
	UserOrderFieldNickname = &UserOrderField{
		field: user.FieldNickname,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.Nickname,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.field {
	case user.FieldNickname:
		str = "NICKNAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "NICKNAME":
		*f = *UserOrderFieldNickname
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
